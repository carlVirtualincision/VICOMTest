ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l0xx_hal_cortex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_NVIC_SetPriority
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_NVIC_SetPriority:
  25              	.LVL0:
  26              	.LFB42:
  27              		.file 1 "mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c"
   1:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
   2:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ******************************************************************************
   3:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @file    stm32l0xx_hal_cortex.c
   4:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following 
   7:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *           + Initialization and Configuration functions
   9:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *
  11:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   @verbatim  
  12:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ==============================================================================
  13:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ==============================================================================
  15:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     [..]  
  16:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  17:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     ===========================================================
  18:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     [..]     
  19:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  20:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     The Cortex M0+ exceptions are managed by CMSIS functions.
  21:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels. 
  22:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****              The priority can be 0..3. 
  23:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  24:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  25:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         -@- Priority Order:
  26:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****             (#@) Lowest priority.
  27:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).  
  28:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     
  29:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****      (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority() 
  30:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  31:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****      (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ() 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 2


  32:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****       
  33:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     [..]  
  34:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  35:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     ========================================================
  36:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     [..]
  37:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  38:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****            
  39:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  40:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        is a CMSIS function that:
  41:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  42:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
  43:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  44:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  45:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  46:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  47:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 	
  48:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the function
  49:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  50:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The HAL_SYSTICK_CLKSourceConfig() function is defined
  51:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        inside the stm32l0xx_hal_cortex.c file.
  52:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  53:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  54:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  55:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  56:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  57:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  58:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****                             
  59:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  60:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  61:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  62:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****    
  63:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   @endverbatim
  64:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ******************************************************************************
  65:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @attention
  66:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *
  67:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
  68:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * All rights reserved.</center></h2>
  69:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *
  70:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  71:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * the "License"; You may not use this file except in compliance with the
  72:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * License. You may obtain a copy of the License at:
  73:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  74:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *
  75:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ******************************************************************************  
  76:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
  77:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  78:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  79:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** #include "stm32l0xx_hal.h"
  80:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  81:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /** @addtogroup STM32L0xx_HAL_Driver
  82:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @{
  83:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
  84:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  85:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
  86:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  87:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX
  88:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 3


  89:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @{
  90:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
  91:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  92:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
  93:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
  94:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
  95:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
  96:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
  97:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
  98:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
  99:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions
 100:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @{
 101:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 102:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 103:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 104:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
 105:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions 
 106:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****  *
 107:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** @verbatim    
 108:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 109:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****               ##### Initialization and Configuration functions #####
 110:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 111:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     [..]
 112:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 113:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****       Systick functionalities 
 114:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 115:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** @endverbatim
 116:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @{
 117:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 118:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 119:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 120:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 121:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 122:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of  IRQn_Type enumeration
 123:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)
 124:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  PreemptPriority The pre-emption priority for the IRQn channel.
 125:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 126:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 127:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
 128:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
 129:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0+ based products.   
 130:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 131:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 132:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 133:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** { 
  28              		.loc 1 133 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 133 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 4


 134:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 135:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  40              		.loc 1 135 3 is_stmt 1 view .LVU2
 136:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn,PreemptPriority);
  41              		.loc 1 136 3 view .LVU3
  42              	.LVL1:
  43              	.LBB28:
  44              	.LBI28:
  45              		.file 2 "mcu-bsp/CMSIS/Include/core_cm0plus.h"
   1:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.7
   5:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @date     13. March 2019
   6:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*
   8:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  10:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  12:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  16:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  18:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
  24:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  25:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
  30:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  31:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  34:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  36:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
  39:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  40:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
  41:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  44:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:mcu-bsp/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  47:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:mcu-bsp/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 5


  49:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  50:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:mcu-bsp/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
  53:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  54:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  55:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
  59:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
  61:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
  62:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  63:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  
  65:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:mcu-bsp/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  71:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  73:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
  76:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  78:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  82:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  83:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_FP
  85:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  87:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  88:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  92:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  93:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  97:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  98:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 102:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 103:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 6


 106:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 107:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 108:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 112:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 113:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 114:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 115:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 117:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 118:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 120:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 121:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 122:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 124:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 126:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 129:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 132:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 133:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 139:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 140:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 144:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 145:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 149:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 150:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 154:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 155:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 159:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 160:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 161:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 7


 163:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 165:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 169:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 172:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 174:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 177:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 182:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 184:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 185:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 186:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 196:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 199:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 200:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 201:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 205:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 206:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 207:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 208:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 210:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 211:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 212:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 213:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 214:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 8


 220:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 223:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 227:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 230:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 233:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 236:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 237:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 238:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 240:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 241:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 242:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 243:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 244:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 250:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 254:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 255:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 256:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 258:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 259:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 260:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 261:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 262:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 274:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 9


 277:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 278:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 281:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 284:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 287:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 290:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 293:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 294:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 295:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 297:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 298:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 299:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 300:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 301:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 308:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 312:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 315:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 317:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 318:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 319:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 323:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 324:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 325:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 326:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 328:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 330:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1[31U];
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 10


 334:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 342:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 344:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 345:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 346:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 350:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 351:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 352:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 353:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 355:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 357:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 362:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 364:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 372:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 376:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 379:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 382:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 385:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 388:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 11


 391:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 392:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 395:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 398:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 401:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 404:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 407:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 410:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 413:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 416:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 421:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 422:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 426:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 429:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 432:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 435:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 438:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 442:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 445:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 12


 448:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 452:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 455:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 459:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 461:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 462:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 463:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 467:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 468:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 469:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 470:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 472:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 474:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 480:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 484:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 487:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 490:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 493:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 497:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 501:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 13


 505:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 508:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 511:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 513:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 515:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 519:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 520:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 521:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 522:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 524:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 526:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 533:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 535:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 539:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 542:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 545:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 549:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 552:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 555:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 559:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 14


 562:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 563:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 566:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 569:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 573:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 576:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 579:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 582:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 585:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 588:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 591:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 594:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 597:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 600:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 602:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 603:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 604:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 605:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:mcu-bsp/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 610:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 611:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 613:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 614:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 615:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 15


 619:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 620:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 621:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 622:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 627:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 629:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 630:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 635:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 637:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 639:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 640:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 641:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 645:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 646:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 647:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 653:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 657:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 661:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 662:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 664:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 665:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 666:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 674:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 16


 676:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 677:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 678:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 679:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 681:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 685:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 686:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 687:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 691:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 693:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 707:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 711:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 713:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 717:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 719:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 720:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 725:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 726:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 732:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 17


 733:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 735:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 736:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 741:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 745:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 748:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 749:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 750:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 751:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 752:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 753:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 754:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 755:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 756:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 757:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 758:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 759:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 760:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 761:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 762:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 763:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 764:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 765:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 766:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   else
 767:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 768:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return(0U);
 769:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 770:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 771:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 772:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 773:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 774:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 775:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 776:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 777:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 778:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 779:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 780:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 781:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 782:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 784:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 785:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __ISB();
 786:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 787:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 788:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 789:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 18


 790:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 791:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 792:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 793:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 794:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 795:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 796:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 797:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 798:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 799:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 800:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 801:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 802:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 803:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 804:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   else
 805:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 806:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return(0U);
 807:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 808:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 809:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 810:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 811:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 812:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 813:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 814:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 815:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 816:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 817:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 818:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 819:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 820:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 821:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 822:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 823:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 824:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 825:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 826:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 827:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 828:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 829:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 830:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 831:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 832:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 833:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 834:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 835:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 836:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 837:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 838:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 839:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 840:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 841:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 842:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 843:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 844:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 845:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 846:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 19


 847:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 848:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 849:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 850:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
  46              		.loc 2 850 22 view .LVU4
  47              	.LBB29:
 851:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 852:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
  48              		.loc 2 852 3 view .LVU5
  49              		.loc 2 852 6 is_stmt 0 view .LVU6
  50 0002 0028     		cmp	r0, #0
  51 0004 11DB     		blt	.L2
 853:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 854:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  52              		.loc 2 854 5 is_stmt 1 view .LVU7
  53              		.loc 2 854 53 is_stmt 0 view .LVU8
  54 0006 8308     		lsrs	r3, r0, #2
  55              		.loc 2 854 52 view .LVU9
  56 0008 134E     		ldr	r6, .L4
  57 000a C033     		adds	r3, r3, #192
  58 000c 9B00     		lsls	r3, r3, #2
  59 000e 9D59     		ldr	r5, [r3, r6]
  60              		.loc 2 854 83 view .LVU10
  61 0010 0324     		movs	r4, #3
  62 0012 2040     		ands	r0, r4
  63              	.LVL2:
  64              		.loc 2 854 83 view .LVU11
  65 0014 C000     		lsls	r0, r0, #3
  66              		.loc 2 854 80 view .LVU12
  67 0016 FF22     		movs	r2, #255
  68              	.LVL3:
  69              		.loc 2 854 80 view .LVU13
  70 0018 1400     		movs	r4, r2
  71 001a 8440     		lsls	r4, r4, r0
  72              		.loc 2 854 33 view .LVU14
  73 001c A543     		bics	r5, r4
 855:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  74              		.loc 2 855 20 view .LVU15
  75 001e 8901     		lsls	r1, r1, #6
  76              	.LVL4:
  77              		.loc 2 855 48 view .LVU16
  78 0020 0A40     		ands	r2, r1
  79              		.loc 2 855 68 view .LVU17
  80 0022 8240     		lsls	r2, r2, r0
 854:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  81              		.loc 2 854 102 view .LVU18
  82 0024 2A43     		orrs	r2, r5
 854:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  83              		.loc 2 854 30 view .LVU19
  84 0026 9A51     		str	r2, [r3, r6]
  85              	.LVL5:
  86              	.L1:
 854:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  87              		.loc 2 854 30 view .LVU20
  88              	.LBE29:
  89              	.LBE28:
 137:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 20


  90              		.loc 1 137 1 view .LVU21
  91              		@ sp needed
  92 0028 70BD     		pop	{r4, r5, r6, pc}
  93              	.LVL6:
  94              	.L2:
  95              	.LBB31:
  96              	.LBB30:
 856:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 857:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   else
 858:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
  97              		.loc 2 859 5 is_stmt 1 view .LVU22
  98              		.loc 2 859 53 is_stmt 0 view .LVU23
  99 002a 0F23     		movs	r3, #15
 100 002c 0340     		ands	r3, r0
 101 002e 083B     		subs	r3, r3, #8
 102 0030 9B08     		lsrs	r3, r3, #2
 103              		.loc 2 859 52 view .LVU24
 104 0032 0633     		adds	r3, r3, #6
 105 0034 9B00     		lsls	r3, r3, #2
 106 0036 094A     		ldr	r2, .L4+4
 107              	.LVL7:
 108              		.loc 2 859 52 view .LVU25
 109 0038 9446     		mov	ip, r2
 110 003a 6344     		add	r3, r3, ip
 111 003c 5C68     		ldr	r4, [r3, #4]
 112              		.loc 2 859 83 view .LVU26
 113 003e 0322     		movs	r2, #3
 114 0040 1040     		ands	r0, r2
 115              	.LVL8:
 116              		.loc 2 859 83 view .LVU27
 117 0042 C000     		lsls	r0, r0, #3
 118              		.loc 2 859 80 view .LVU28
 119 0044 FC32     		adds	r2, r2, #252
 120 0046 1500     		movs	r5, r2
 121 0048 8540     		lsls	r5, r5, r0
 122              		.loc 2 859 33 view .LVU29
 123 004a AC43     		bics	r4, r5
 860:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 124              		.loc 2 860 20 view .LVU30
 125 004c 8901     		lsls	r1, r1, #6
 126              	.LVL9:
 127              		.loc 2 860 48 view .LVU31
 128 004e 0A40     		ands	r2, r1
 129              		.loc 2 860 68 view .LVU32
 130 0050 8240     		lsls	r2, r2, r0
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 131              		.loc 2 859 102 view .LVU33
 132 0052 2243     		orrs	r2, r4
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 133              		.loc 2 859 30 view .LVU34
 134 0054 5A60     		str	r2, [r3, #4]
 135              	.LVL10:
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 136              		.loc 2 859 30 view .LVU35
 137              	.LBE30:
 138              	.LBE31:
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 21


 139              		.loc 1 137 1 view .LVU36
 140 0056 E7E7     		b	.L1
 141              	.L5:
 142              		.align	2
 143              	.L4:
 144 0058 00E100E0 		.word	-536813312
 145 005c 00ED00E0 		.word	-536810240
 146              		.cfi_endproc
 147              	.LFE42:
 149              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 150              		.align	1
 151              		.global	HAL_NVIC_EnableIRQ
 152              		.syntax unified
 153              		.code	16
 154              		.thumb_func
 155              		.fpu softvfp
 157              	HAL_NVIC_EnableIRQ:
 158              	.LVL11:
 159              	.LFB43:
 138:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 139:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 140:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Enable a device specific interrupt in the NVIC interrupt controller.
 141:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 142:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         function should be called before. 
 143:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 144:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of  IRQn_Type enumeration
 145:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 146:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 147:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 148:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 149:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 160              		.loc 1 149 1 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 150:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 151:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 165              		.loc 1 151 3 view .LVU38
 152:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   
 153:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Enable interrupt */
 154:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 166              		.loc 1 154 3 view .LVU39
 167              	.LBB32:
 168              	.LBI32:
 741:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 169              		.loc 2 741 22 view .LVU40
 170              	.LBB33:
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 171              		.loc 2 743 3 view .LVU41
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 172              		.loc 2 743 6 is_stmt 0 view .LVU42
 173 0000 0028     		cmp	r0, #0
 174 0002 05DB     		blt	.L6
 745:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 175              		.loc 2 745 5 is_stmt 1 view .LVU43
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 22


 176              		.loc 2 746 5 view .LVU44
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 177              		.loc 2 746 58 is_stmt 0 view .LVU45
 178 0004 1F23     		movs	r3, #31
 179 0006 1840     		ands	r0, r3
 180              	.LVL12:
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 181              		.loc 2 746 22 view .LVU46
 182 0008 1E3B     		subs	r3, r3, #30
 183 000a 8340     		lsls	r3, r3, r0
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 184              		.loc 2 746 20 view .LVU47
 185 000c 014A     		ldr	r2, .L8
 186 000e 1360     		str	r3, [r2]
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 187              		.loc 2 747 5 is_stmt 1 view .LVU48
 188              	.LVL13:
 189              	.L6:
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 190              		.loc 2 747 5 is_stmt 0 view .LVU49
 191              	.LBE33:
 192              	.LBE32:
 155:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 193              		.loc 1 155 1 view .LVU50
 194              		@ sp needed
 195 0010 7047     		bx	lr
 196              	.L9:
 197 0012 C046     		.align	2
 198              	.L8:
 199 0014 00E100E0 		.word	-536813312
 200              		.cfi_endproc
 201              	.LFE43:
 203              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 204              		.align	1
 205              		.global	HAL_NVIC_DisableIRQ
 206              		.syntax unified
 207              		.code	16
 208              		.thumb_func
 209              		.fpu softvfp
 211              	HAL_NVIC_DisableIRQ:
 212              	.LVL14:
 213              	.LFB44:
 156:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 157:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 158:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Disable a device specific interrupt in the NVIC interrupt controller.
 159:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 160:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 161:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 162:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 163:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 164:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 165:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 214              		.loc 1 165 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 23


 166:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 167:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 219              		.loc 1 167 3 view .LVU52
 168:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   
 169:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Disable interrupt */
 170:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 220              		.loc 1 170 3 view .LVU53
 221              	.LBB34:
 222              	.LBI34:
 779:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 223              		.loc 2 779 22 view .LVU54
 224              	.LBB35:
 781:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 225              		.loc 2 781 3 view .LVU55
 781:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 226              		.loc 2 781 6 is_stmt 0 view .LVU56
 227 0000 0028     		cmp	r0, #0
 228 0002 0ADB     		blt	.L10
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 229              		.loc 2 783 5 is_stmt 1 view .LVU57
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 230              		.loc 2 783 58 is_stmt 0 view .LVU58
 231 0004 1F23     		movs	r3, #31
 232 0006 1840     		ands	r0, r3
 233              	.LVL15:
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 234              		.loc 2 783 22 view .LVU59
 235 0008 1E3B     		subs	r3, r3, #30
 236 000a 8340     		lsls	r3, r3, r0
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 237              		.loc 2 783 20 view .LVU60
 238 000c 0349     		ldr	r1, .L12
 239 000e 8022     		movs	r2, #128
 240 0010 8B50     		str	r3, [r1, r2]
 784:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __ISB();
 241              		.loc 2 784 5 is_stmt 1 view .LVU61
 242              	.LBB36:
 243              	.LBI36:
 244              		.file 3 "mcu-bsp/CMSIS/Include/cmsis_gcc.h"
   1:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /*
   8:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  10:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  12:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  16:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  18:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 24


  19:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
  24:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  25:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  28:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  34:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  38:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  39:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  43:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  46:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  49:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  55:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  58:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  61:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  64:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  67:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  70:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 25


  76:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  78:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  86:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  94:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 102:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 110:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 113:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 116:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 119:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 120:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 122:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 124:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 125:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 130:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 131:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 26


 133:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 135:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 141:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 146:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 151:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     }
 155:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   }
 156:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  
 157:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     }
 161:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   }
 162:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  
 163:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 165:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 166:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 168:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 169:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 172:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 173:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 176:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 177:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 180:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 181:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 184:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 185:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   @{
 189:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 27


 190:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 191:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 192:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 196:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 198:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 200:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 201:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 202:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 203:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 207:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 209:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 211:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 212:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 213:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 214:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 218:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 220:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 222:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 225:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 226:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 227:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 229:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 233:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 235:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 237:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 240:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 241:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 242:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 243:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 244:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 28


 247:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 248:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 250:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 252:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 253:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 254:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 256:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 260:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 262:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 264:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 265:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 266:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 267:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 268:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 272:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 274:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 276:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 279:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 280:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 281:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 282:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 286:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 288:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 290:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 293:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 294:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 295:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 296:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 300:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 302:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 29


 304:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 307:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 308:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 309:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 310:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 314:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 316:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 318:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 321:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 322:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 323:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 325:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 329:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 331:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 333:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 336:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 337:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 338:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 339:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 340:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 344:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 346:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 348:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 349:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 350:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 352:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 356:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 358:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 360:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 30


 361:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 362:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 363:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 364:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 368:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 370:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 372:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 375:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 376:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 377:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 379:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 383:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 385:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 387:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 390:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 391:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 392:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 393:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 394:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 398:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 400:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 402:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 403:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 404:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 406:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 410:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 412:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 414:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 415:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 416:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 417:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 31


 418:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 419:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 423:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 425:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 427:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 430:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 431:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 432:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 433:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 437:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 439:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 441:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 442:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 443:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 444:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 445:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 449:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 451:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 453:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 456:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 457:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 458:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 460:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 464:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 466:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 468:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 471:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 472:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 473:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 474:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 32


 475:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 479:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 481:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 483:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 484:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 485:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 487:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 491:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 493:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 495:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 496:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 497:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 498:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 502:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 506:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 508:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 510:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 511:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 512:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 513:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 517:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 519:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 521:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 522:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 523:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 524:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 528:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 530:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 33


 532:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 535:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 536:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 537:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 539:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 543:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 545:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 547:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 550:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 551:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 552:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 553:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 554:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 558:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 560:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 562:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 563:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 564:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 566:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 570:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 572:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 574:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 575:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 576:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 577:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 578:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 583:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 585:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 587:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 588:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 34


 589:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 590:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 594:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 596:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 598:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 601:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 602:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 603:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 605:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 609:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 611:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 613:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 616:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 617:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 618:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 619:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 620:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 624:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 626:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 628:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 629:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 630:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 632:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 636:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 638:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 640:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 641:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 642:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 35


 646:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 647:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 650:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 651:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 656:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 659:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 661:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 666:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 670:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 671:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 672:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 674:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 678:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 681:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 683:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 687:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 691:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 692:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 693:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 694:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 695:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 696:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 701:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 36


 703:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 704:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 706:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 711:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 713:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 714:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 715:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 716:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 718:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 722:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 725:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 727:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 731:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 733:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 734:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 735:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 736:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 737:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 738:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 743:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 746:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 748:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 753:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 757:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 758:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 759:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 37


 760:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 762:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 766:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 769:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 771:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 775:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 779:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 780:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 781:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 782:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 783:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 784:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 789:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 792:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 794:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 799:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 801:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 802:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 803:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 804:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 806:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 810:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 813:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 815:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 38


 817:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 819:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 821:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 822:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 823:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 824:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 827:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 828:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 829:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 833:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 835:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 843:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 845:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 848:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 849:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 851:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 852:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 853:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 854:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 855:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 859:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 861:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 869:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 871:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 872:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 39


 874:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 875:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 876:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 877:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 879:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 880:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   @{
 884:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** */
 885:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 886:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 894:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 898:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 899:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 900:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 903:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 905:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 906:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 909:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 911:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 912:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 913:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 917:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 919:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 920:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 921:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 924:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 926:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 927:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 928:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 40


 931:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 933:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 937:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 938:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 939:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 940:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 944:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 245              		.loc 3 944 27 view .LVU62
 246              	.LBB37:
 945:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 946:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 247              		.loc 3 946 3 view .LVU63
 248              		.syntax divided
 249              	@ 946 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 250 0012 BFF34F8F 		dsb 0xF
 251              	@ 0 "" 2
 252              		.thumb
 253              		.syntax unified
 254              	.LBE37:
 255              	.LBE36:
 785:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 256              		.loc 2 785 5 view .LVU64
 257              	.LBB38:
 258              	.LBI38:
 933:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 259              		.loc 3 933 27 view .LVU65
 260              	.LBB39:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 261              		.loc 3 935 3 view .LVU66
 262              		.syntax divided
 263              	@ 935 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 264 0016 BFF36F8F 		isb 0xF
 265              	@ 0 "" 2
 266              	.LVL16:
 267              		.thumb
 268              		.syntax unified
 269              	.L10:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 270              		.loc 3 935 3 is_stmt 0 view .LVU67
 271              	.LBE39:
 272              	.LBE38:
 273              	.LBE35:
 274              	.LBE34:
 171:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 275              		.loc 1 171 1 view .LVU68
 276              		@ sp needed
 277 001a 7047     		bx	lr
 278              	.L13:
 279              		.align	2
 280              	.L12:
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 41


 281 001c 00E100E0 		.word	-536813312
 282              		.cfi_endproc
 283              	.LFE44:
 285              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 286              		.align	1
 287              		.global	HAL_NVIC_SystemReset
 288              		.syntax unified
 289              		.code	16
 290              		.thumb_func
 291              		.fpu softvfp
 293              	HAL_NVIC_SystemReset:
 294              	.LFB45:
 172:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 173:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 174:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Initiate a system reset request to reset the MCU.
 175:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 176:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 177:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 178:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 295              		.loc 1 178 1 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ Volatile: function does not return.
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 179:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* System Reset */
 180:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   NVIC_SystemReset();
 301              		.loc 1 180 3 view .LVU70
 302              	.LBB46:
 303              	.LBI46:
 861:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 862:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 863:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 864:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 865:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 866:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 867:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 868:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 869:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 870:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 871:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 872:mcu-bsp/CMSIS/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 873:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 874:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 875:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 876:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 877:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 878:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 880:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 881:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   else
 882:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 884:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 885:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 886:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 887:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 42


 888:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 889:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Encode Priority
 890:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 891:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 892:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 893:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 894:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 895:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 896:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 897:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 898:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 899:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 900:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 901:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 902:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 903:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 904:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 905:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 906:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 907:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 908:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   return (
 909:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 910:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 911:mcu-bsp/CMSIS/Include/core_cm0plus.h ****          );
 912:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 913:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 914:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 915:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 916:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Decode Priority
 917:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 918:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 919:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 920:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 921:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 922:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 923:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 924:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 925:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 926:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 927:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 928:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 929:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 930:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 931:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 932:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 933:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 934:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 935:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 936:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 937:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 938:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 939:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 940:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 941:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 942:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 943:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 944:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 43


 945:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 946:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 947:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 948:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 949:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 950:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 951:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 952:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 953:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = SCB->VTOR;
 954:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 955:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = 0x0U;
 956:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 957:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 958:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   /* ARM Application Note 321 states that the M0+ does not require the architectural barrier */
 959:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 960:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 961:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 962:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 963:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 964:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 965:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 966:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 967:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 968:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 969:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 970:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 971:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 972:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 973:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = SCB->VTOR;
 974:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 975:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = 0x0U;
 976:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 977:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4));
 978:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 979:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 980:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 981:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 982:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   System Reset
 983:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 984:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 985:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 304              		.loc 2 985 34 view .LVU71
 305              	.LBB47:
 986:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 987:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
 306              		.loc 2 987 3 view .LVU72
 307              	.LBB48:
 308              	.LBI48:
 944:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 309              		.loc 3 944 27 view .LVU73
 310              	.LBB49:
 311              		.loc 3 946 3 view .LVU74
 312              		.syntax divided
 313              	@ 946 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 314 0000 BFF34F8F 		dsb 0xF
 315              	@ 0 "" 2
 316              		.thumb
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 44


 317              		.syntax unified
 318              	.LBE49:
 319              	.LBE48:
 988:mcu-bsp/CMSIS/Include/core_cm0plus.h ****                                                                        buffered write are completed
 989:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 320              		.loc 2 989 3 view .LVU75
 321              		.loc 2 989 15 is_stmt 0 view .LVU76
 322 0004 034B     		ldr	r3, .L16
 323 0006 044A     		ldr	r2, .L16+4
 324 0008 DA60     		str	r2, [r3, #12]
 990:mcu-bsp/CMSIS/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 991:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
 325              		.loc 2 991 3 is_stmt 1 view .LVU77
 326              	.LBB50:
 327              	.LBI50:
 944:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 328              		.loc 3 944 27 view .LVU78
 329              	.LBB51:
 330              		.loc 3 946 3 view .LVU79
 331              		.syntax divided
 332              	@ 946 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 333 000a BFF34F8F 		dsb 0xF
 334              	@ 0 "" 2
 335              		.thumb
 336              		.syntax unified
 337              	.L15:
 338              	.LBE51:
 339              	.LBE50:
 992:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 993:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
 340              		.loc 2 993 3 view .LVU80
 994:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 995:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __NOP();
 341              		.loc 2 995 5 view .LVU81
 342              		.syntax divided
 343              	@ 995 "mcu-bsp/CMSIS/Include/core_cm0plus.h" 1
 344 000e C046     		nop
 345              	@ 0 "" 2
 993:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 346              		.loc 2 993 8 view .LVU82
 347              		.thumb
 348              		.syntax unified
 349 0010 FDE7     		b	.L15
 350              	.L17:
 351 0012 C046     		.align	2
 352              	.L16:
 353 0014 00ED00E0 		.word	-536810240
 354 0018 0400FA05 		.word	100270084
 355              	.LBE47:
 356              	.LBE46:
 357              		.cfi_endproc
 358              	.LFE45:
 360              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 361              		.align	1
 362              		.global	HAL_SYSTICK_Config
 363              		.syntax unified
 364              		.code	16
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 45


 365              		.thumb_func
 366              		.fpu softvfp
 368              	HAL_SYSTICK_Config:
 369              	.LVL17:
 370              	.LFB46:
 181:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 182:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 183:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 184:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Initialize the System Timer with interrupt enabled and start the System Tick Timer (Sys
 185:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 186:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 187:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 188:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *                  - 1  Function failed.
 189:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 190:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 191:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 371              		.loc 1 191 1 view -0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		@ link register save eliminated.
 192:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 376              		.loc 1 192 4 view .LVU84
 377              	.LBB56:
 378              	.LBI56:
 996:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 997:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 998:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 999:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_NVICFunctions */
1000:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1001:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* ##########################  MPU functions  #################################### */
1002:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1003:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1004:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1005:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #include "mpu_armv7.h"
1006:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1007:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
1008:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1009:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* ##########################  FPU functions  #################################### */
1010:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
1011:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1012:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1013:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Function that provides FPU type.
1014:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
1015:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
1016:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1017:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
1018:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   get FPU type
1019:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details returns the FPU type
1020:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \returns
1021:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    - \b  0: No FPU
1022:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    - \b  1: Single precision FPU
1023:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    - \b  2: Double + Single precision FPU
1024:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
1025:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1026:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
1027:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return 0U;           /* No FPU */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 46


1028:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
1029:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1030:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1031:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_FpuFunctions */
1032:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1033:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1034:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1035:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* ##################################    SysTick function  ########################################
1036:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
1037:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1038:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1039:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that configure the System.
1040:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
1041:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
1042:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1043:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1044:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1045:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
1046:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   System Tick Configuration
1047:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1048:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            Counter is in free running mode to generate periodic interrupts.
1049:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1050:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return          0  Function succeeded.
1051:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return          1  Function failed.
1052:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1053:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1054:mcu-bsp/CMSIS/Include/core_cm0plus.h ****            must contain a vendor-specific implementation of this function.
1055:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
1056:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 379              		.loc 2 1056 26 view .LVU85
 380              	.LBB57:
1057:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
1058:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 381              		.loc 2 1058 3 view .LVU86
 382              		.loc 2 1058 14 is_stmt 0 view .LVU87
 383 0000 0138     		subs	r0, r0, #1
 384              	.LVL18:
 385              		.loc 2 1058 6 view .LVU88
 386 0002 8023     		movs	r3, #128
 387 0004 5B04     		lsls	r3, r3, #17
 388 0006 9842     		cmp	r0, r3
 389 0008 0FD2     		bcs	.L20
1059:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
1060:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return (1UL);                                                   /* Reload value impossible */
1061:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
1062:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
1063:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 390              		.loc 2 1063 3 is_stmt 1 view .LVU89
 391              		.loc 2 1063 18 is_stmt 0 view .LVU90
 392 000a 094A     		ldr	r2, .L21
 393 000c 5060     		str	r0, [r2, #4]
1064:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 394              		.loc 2 1064 3 is_stmt 1 view .LVU91
 395              	.LVL19:
 396              	.LBB58:
 397              	.LBI58:
 850:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 47


 398              		.loc 2 850 22 view .LVU92
 399              	.LBB59:
 852:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 400              		.loc 2 852 3 view .LVU93
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 401              		.loc 2 859 5 view .LVU94
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 402              		.loc 2 859 52 is_stmt 0 view .LVU95
 403 000e 0948     		ldr	r0, .L21+4
 404              	.LVL20:
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 405              		.loc 2 859 52 view .LVU96
 406 0010 036A     		ldr	r3, [r0, #32]
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 407              		.loc 2 859 33 view .LVU97
 408 0012 1B02     		lsls	r3, r3, #8
 409 0014 1B0A     		lsrs	r3, r3, #8
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 410              		.loc 2 859 102 view .LVU98
 411 0016 C021     		movs	r1, #192
 412 0018 0906     		lsls	r1, r1, #24
 413 001a 0B43     		orrs	r3, r1
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 414              		.loc 2 859 30 view .LVU99
 415 001c 0362     		str	r3, [r0, #32]
 416              	.LVL21:
 859:mcu-bsp/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 417              		.loc 2 859 30 view .LVU100
 418              	.LBE59:
 419              	.LBE58:
1065:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 420              		.loc 2 1065 3 is_stmt 1 view .LVU101
 421              		.loc 2 1065 18 is_stmt 0 view .LVU102
 422 001e 0023     		movs	r3, #0
 423 0020 9360     		str	r3, [r2, #8]
1066:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 424              		.loc 2 1066 3 is_stmt 1 view .LVU103
 425              		.loc 2 1066 18 is_stmt 0 view .LVU104
 426 0022 0733     		adds	r3, r3, #7
 427 0024 1360     		str	r3, [r2]
1067:mcu-bsp/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_TICKINT_Msk   |
1068:mcu-bsp/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
1069:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   return (0UL);                                                     /* Function successful */
 428              		.loc 2 1069 3 is_stmt 1 view .LVU105
 429              		.loc 2 1069 10 is_stmt 0 view .LVU106
 430 0026 0020     		movs	r0, #0
 431              	.LVL22:
 432              	.L18:
 433              		.loc 2 1069 10 view .LVU107
 434              	.LBE57:
 435              	.LBE56:
 193:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 436              		.loc 1 193 1 view .LVU108
 437              		@ sp needed
 438 0028 7047     		bx	lr
 439              	.LVL23:
 440              	.L20:
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 48


 441              	.LBB61:
 442              	.LBB60:
1060:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 443              		.loc 2 1060 12 view .LVU109
 444 002a 0120     		movs	r0, #1
 445              	.LVL24:
1060:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 446              		.loc 2 1060 12 view .LVU110
 447              	.LBE60:
 448              	.LBE61:
 192:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 449              		.loc 1 192 11 view .LVU111
 450 002c FCE7     		b	.L18
 451              	.L22:
 452 002e C046     		.align	2
 453              	.L21:
 454 0030 10E000E0 		.word	-536813552
 455 0034 00ED00E0 		.word	-536810240
 456              		.cfi_endproc
 457              	.LFE46:
 459              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 460              		.align	1
 461              		.global	HAL_NVIC_GetPriority
 462              		.syntax unified
 463              		.code	16
 464              		.thumb_func
 465              		.fpu softvfp
 467              	HAL_NVIC_GetPriority:
 468              	.LVL25:
 469              	.LFB47:
 194:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 195:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @}
 196:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 197:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 198:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group2 Peripheral Control functions 
 199:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****  *  @brief   Cortex control functions 
 200:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****  *
 201:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** @verbatim   
 202:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 203:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 204:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   ==============================================================================  
 205:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     [..]
 206:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 207:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****       (NVIC, SYSTICK) functionalities. 
 208:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****  
 209:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****       
 210:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** @endverbatim
 211:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @{
 212:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 213:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 214:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 215:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 216:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 217:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 218:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 219:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 220:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 49


 221:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 222:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 223:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 470              		.loc 1 223 1 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 224:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 225:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 475              		.loc 1 225 3 view .LVU113
 476              	.LBB64:
 477              	.LBI64:
 874:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 478              		.loc 2 874 26 view .LVU114
 479              	.LBB65:
 877:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 480              		.loc 2 877 3 view .LVU115
 877:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 481              		.loc 2 877 6 is_stmt 0 view .LVU116
 482 0000 0028     		cmp	r0, #0
 483 0002 0CDB     		blt	.L24
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 484              		.loc 2 879 5 is_stmt 1 view .LVU117
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 485              		.loc 2 879 35 is_stmt 0 view .LVU118
 486 0004 8308     		lsrs	r3, r0, #2
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 487              		.loc 2 879 33 view .LVU119
 488 0006 C033     		adds	r3, r3, #192
 489 0008 9B00     		lsls	r3, r3, #2
 490 000a 0E4A     		ldr	r2, .L26
 491 000c 9B58     		ldr	r3, [r3, r2]
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 492              		.loc 2 879 53 view .LVU120
 493 000e 0322     		movs	r2, #3
 494 0010 1040     		ands	r0, r2
 495              	.LVL26:
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 496              		.loc 2 879 53 view .LVU121
 497 0012 C000     		lsls	r0, r0, #3
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 498              		.loc 2 879 50 view .LVU122
 499 0014 C340     		lsrs	r3, r3, r0
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 500              		.loc 2 879 12 view .LVU123
 501 0016 9B09     		lsrs	r3, r3, #6
 502 0018 0320     		movs	r0, #3
 503 001a 1840     		ands	r0, r3
 504              	.LVL27:
 505              	.L23:
 879:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 506              		.loc 2 879 12 view .LVU124
 507              	.LBE65:
 508              	.LBE64:
 226:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 509              		.loc 1 226 1 view .LVU125
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 50


 510              		@ sp needed
 511 001c 7047     		bx	lr
 512              	.LVL28:
 513              	.L24:
 514              	.LBB67:
 515              	.LBB66:
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 516              		.loc 2 883 5 is_stmt 1 view .LVU126
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 517              		.loc 2 883 34 is_stmt 0 view .LVU127
 518 001e 0F23     		movs	r3, #15
 519 0020 0340     		ands	r3, r0
 520 0022 083B     		subs	r3, r3, #8
 521 0024 9B08     		lsrs	r3, r3, #2
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 522              		.loc 2 883 33 view .LVU128
 523 0026 0633     		adds	r3, r3, #6
 524 0028 9B00     		lsls	r3, r3, #2
 525 002a 074A     		ldr	r2, .L26+4
 526 002c 9446     		mov	ip, r2
 527 002e 6344     		add	r3, r3, ip
 528 0030 5B68     		ldr	r3, [r3, #4]
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 529              		.loc 2 883 53 view .LVU129
 530 0032 0322     		movs	r2, #3
 531 0034 1040     		ands	r0, r2
 532              	.LVL29:
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 533              		.loc 2 883 53 view .LVU130
 534 0036 C000     		lsls	r0, r0, #3
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 535              		.loc 2 883 50 view .LVU131
 536 0038 C340     		lsrs	r3, r3, r0
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 537              		.loc 2 883 12 view .LVU132
 538 003a 9B09     		lsrs	r3, r3, #6
 539 003c 0320     		movs	r0, #3
 540 003e 1840     		ands	r0, r3
 541              	.LVL30:
 883:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 542              		.loc 2 883 12 view .LVU133
 543              	.LBE66:
 544              	.LBE67:
 225:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 545              		.loc 1 225 10 view .LVU134
 546 0040 ECE7     		b	.L23
 547              	.L27:
 548 0042 C046     		.align	2
 549              	.L26:
 550 0044 00E100E0 		.word	-536813312
 551 0048 00ED00E0 		.word	-536810240
 552              		.cfi_endproc
 553              	.LFE47:
 555              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 556              		.align	1
 557              		.global	HAL_NVIC_SetPendingIRQ
 558              		.syntax unified
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 51


 559              		.code	16
 560              		.thumb_func
 561              		.fpu softvfp
 563              	HAL_NVIC_SetPendingIRQ:
 564              	.LVL31:
 565              	.LFB48:
 227:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 228:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 229:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 230:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 231:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 232:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 233:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 234:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 235:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 236:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** { 
 566              		.loc 1 236 1 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 237:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Set interrupt pending */
 238:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 571              		.loc 1 238 3 view .LVU136
 572              	.LBB68:
 573              	.LBI68:
 817:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 574              		.loc 2 817 22 view .LVU137
 575              	.LBB69:
 819:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 576              		.loc 2 819 3 view .LVU138
 819:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 577              		.loc 2 819 6 is_stmt 0 view .LVU139
 578 0000 0028     		cmp	r0, #0
 579 0002 07DB     		blt	.L28
 821:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 580              		.loc 2 821 5 is_stmt 1 view .LVU140
 821:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 581              		.loc 2 821 58 is_stmt 0 view .LVU141
 582 0004 1F23     		movs	r3, #31
 583 0006 1840     		ands	r0, r3
 584              	.LVL32:
 821:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 585              		.loc 2 821 22 view .LVU142
 586 0008 1E3B     		subs	r3, r3, #30
 587 000a 8340     		lsls	r3, r3, r0
 821:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 588              		.loc 2 821 20 view .LVU143
 589 000c 0249     		ldr	r1, .L30
 590 000e 8022     		movs	r2, #128
 591 0010 5200     		lsls	r2, r2, #1
 592 0012 8B50     		str	r3, [r1, r2]
 593              	.LVL33:
 594              	.L28:
 821:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 595              		.loc 2 821 20 view .LVU144
 596              	.LBE69:
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 52


 597              	.LBE68:
 239:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 598              		.loc 1 239 1 view .LVU145
 599              		@ sp needed
 600 0014 7047     		bx	lr
 601              	.L31:
 602 0016 C046     		.align	2
 603              	.L30:
 604 0018 00E100E0 		.word	-536813312
 605              		.cfi_endproc
 606              	.LFE48:
 608              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 609              		.align	1
 610              		.global	HAL_NVIC_GetPendingIRQ
 611              		.syntax unified
 612              		.code	16
 613              		.thumb_func
 614              		.fpu softvfp
 616              	HAL_NVIC_GetPendingIRQ:
 617              	.LVL34:
 618              	.LFB49:
 240:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 241:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 242:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Get Pending Interrupt (read the pending register in the NVIC 
 243:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         and return the pending bit for the specified interrupt).
 244:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 245:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *          This parameter can be an enumerator of  IRQn_Type enumeration
 246:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 247:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 248:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 249:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 250:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 251:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** { 
 619              		.loc 1 251 1 is_stmt 1 view -0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 252:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 253:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 624              		.loc 1 253 3 view .LVU147
 625              	.LBB70:
 626              	.LBI70:
 798:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 627              		.loc 2 798 26 view .LVU148
 628              	.LBB71:
 800:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 629              		.loc 2 800 3 view .LVU149
 800:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 630              		.loc 2 800 6 is_stmt 0 view .LVU150
 631 0000 0028     		cmp	r0, #0
 632 0002 09DB     		blt	.L34
 802:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 633              		.loc 2 802 5 is_stmt 1 view .LVU151
 802:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 634              		.loc 2 802 35 is_stmt 0 view .LVU152
 635 0004 054A     		ldr	r2, .L35
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 53


 636 0006 8023     		movs	r3, #128
 637 0008 5B00     		lsls	r3, r3, #1
 638 000a D358     		ldr	r3, [r2, r3]
 802:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 639              		.loc 2 802 68 view .LVU153
 640 000c 1F22     		movs	r2, #31
 641 000e 1040     		ands	r0, r2
 642              	.LVL35:
 802:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 643              		.loc 2 802 80 view .LVU154
 644 0010 C340     		lsrs	r3, r3, r0
 802:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 645              		.loc 2 802 12 view .LVU155
 646 0012 0120     		movs	r0, #1
 647 0014 1840     		ands	r0, r3
 648              	.LVL36:
 649              	.L32:
 802:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 650              		.loc 2 802 12 view .LVU156
 651              	.LBE71:
 652              	.LBE70:
 254:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 653              		.loc 1 254 1 view .LVU157
 654              		@ sp needed
 655 0016 7047     		bx	lr
 656              	.LVL37:
 657              	.L34:
 658              	.LBB73:
 659              	.LBB72:
 806:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 660              		.loc 2 806 11 view .LVU158
 661 0018 0020     		movs	r0, #0
 662              	.LVL38:
 806:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 663              		.loc 2 806 11 view .LVU159
 664              	.LBE72:
 665              	.LBE73:
 253:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 666              		.loc 1 253 10 view .LVU160
 667 001a FCE7     		b	.L32
 668              	.L36:
 669              		.align	2
 670              	.L35:
 671 001c 00E100E0 		.word	-536813312
 672              		.cfi_endproc
 673              	.LFE49:
 675              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 676              		.align	1
 677              		.global	HAL_NVIC_ClearPendingIRQ
 678              		.syntax unified
 679              		.code	16
 680              		.thumb_func
 681              		.fpu softvfp
 683              	HAL_NVIC_ClearPendingIRQ:
 684              	.LVL39:
 685              	.LFB50:
 255:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 54


 256:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 257:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Clear the pending bit of an external interrupt.
 258:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 259:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 260:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 261:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 262:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 263:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 264:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** { 
 686              		.loc 1 264 1 is_stmt 1 view -0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 265:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Clear pending interrupt */
 266:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 691              		.loc 1 266 3 view .LVU162
 692              	.LBB74:
 693              	.LBI74:
 832:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 694              		.loc 2 832 22 view .LVU163
 695              	.LBB75:
 834:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 696              		.loc 2 834 3 view .LVU164
 834:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 697              		.loc 2 834 6 is_stmt 0 view .LVU165
 698 0000 0028     		cmp	r0, #0
 699 0002 07DB     		blt	.L37
 836:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 700              		.loc 2 836 5 is_stmt 1 view .LVU166
 836:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 701              		.loc 2 836 58 is_stmt 0 view .LVU167
 702 0004 1F23     		movs	r3, #31
 703 0006 1840     		ands	r0, r3
 704              	.LVL40:
 836:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 705              		.loc 2 836 22 view .LVU168
 706 0008 1E3B     		subs	r3, r3, #30
 707 000a 8340     		lsls	r3, r3, r0
 836:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 708              		.loc 2 836 20 view .LVU169
 709 000c 0249     		ldr	r1, .L39
 710 000e C022     		movs	r2, #192
 711 0010 5200     		lsls	r2, r2, #1
 712 0012 8B50     		str	r3, [r1, r2]
 713              	.LVL41:
 714              	.L37:
 836:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 715              		.loc 2 836 20 view .LVU170
 716              	.LBE75:
 717              	.LBE74:
 267:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 718              		.loc 1 267 1 view .LVU171
 719              		@ sp needed
 720 0014 7047     		bx	lr
 721              	.L40:
 722 0016 C046     		.align	2
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 55


 723              	.L39:
 724 0018 00E100E0 		.word	-536813312
 725              		.cfi_endproc
 726              	.LFE50:
 728              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 729              		.align	1
 730              		.global	HAL_SYSTICK_CLKSourceConfig
 731              		.syntax unified
 732              		.code	16
 733              		.thumb_func
 734              		.fpu softvfp
 736              	HAL_SYSTICK_CLKSourceConfig:
 737              	.LVL42:
 738              	.LFB51:
 268:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 269:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 270:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 271:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Configure the SysTick clock source.
 272:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 273:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 274:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 275:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 276:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 277:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 278:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 279:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 739              		.loc 1 279 1 is_stmt 1 view -0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 280:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 281:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 744              		.loc 1 281 3 view .LVU173
 282:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 745              		.loc 1 282 3 view .LVU174
 746              		.loc 1 282 6 is_stmt 0 view .LVU175
 747 0000 0428     		cmp	r0, #4
 748 0002 05D0     		beq	.L44
 283:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   {
 284:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 285:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   }
 286:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   else
 287:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   {
 288:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 749              		.loc 1 288 5 is_stmt 1 view .LVU176
 750              		.loc 1 288 19 is_stmt 0 view .LVU177
 751 0004 054A     		ldr	r2, .L45
 752 0006 1368     		ldr	r3, [r2]
 753 0008 0421     		movs	r1, #4
 754 000a 8B43     		bics	r3, r1
 755 000c 1360     		str	r3, [r2]
 756              	.L41:
 289:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   }
 290:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 757              		.loc 1 290 1 view .LVU178
 758              		@ sp needed
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 56


 759 000e 7047     		bx	lr
 760              	.L44:
 284:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   }
 761              		.loc 1 284 5 is_stmt 1 view .LVU179
 284:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   }
 762              		.loc 1 284 19 is_stmt 0 view .LVU180
 763 0010 024A     		ldr	r2, .L45
 764 0012 1368     		ldr	r3, [r2]
 765 0014 0421     		movs	r1, #4
 766 0016 0B43     		orrs	r3, r1
 767 0018 1360     		str	r3, [r2]
 768 001a F8E7     		b	.L41
 769              	.L46:
 770              		.align	2
 771              	.L45:
 772 001c 10E000E0 		.word	-536813552
 773              		.cfi_endproc
 774              	.LFE51:
 776              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 777              		.align	1
 778              		.weak	HAL_SYSTICK_Callback
 779              		.syntax unified
 780              		.code	16
 781              		.thumb_func
 782              		.fpu softvfp
 784              	HAL_SYSTICK_Callback:
 785              	.LFB53:
 291:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 292:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 293:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  Handle SYSTICK interrupt request.
 294:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 295:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 296:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 297:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 298:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 299:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 300:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 301:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** /**
 302:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 303:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   * @retval None
 304:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   */
 305:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 306:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** {
 786              		.loc 1 306 1 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 307:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 308:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 309:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****    */
 310:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 791              		.loc 1 310 1 view .LVU182
 792              		@ sp needed
 793 0000 7047     		bx	lr
 794              		.cfi_endproc
 795              	.LFE53:
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 57


 797              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 798              		.align	1
 799              		.global	HAL_SYSTICK_IRQHandler
 800              		.syntax unified
 801              		.code	16
 802              		.thumb_func
 803              		.fpu softvfp
 805              	HAL_SYSTICK_IRQHandler:
 806              	.LFB52:
 297:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 807              		.loc 1 297 1 view -0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811 0000 10B5     		push	{r4, lr}
 812              	.LCFI1:
 813              		.cfi_def_cfa_offset 8
 814              		.cfi_offset 4, -8
 815              		.cfi_offset 14, -4
 298:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** }
 816              		.loc 1 298 3 view .LVU184
 817 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 818              	.LVL43:
 299:mcu-bsp/peripherals/stm32l0xx/src/stm32l0xx_hal_cortex.c **** 
 819              		.loc 1 299 1 is_stmt 0 view .LVU185
 820              		@ sp needed
 821 0006 10BD     		pop	{r4, pc}
 822              		.cfi_endproc
 823              	.LFE52:
 825              		.text
 826              	.Letext0:
 827              		.file 4 "mcu-bsp/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 828              		.file 5 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10-2020-q4-m
 829              		.file 6 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10-2020-q4-m
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s 			page 58


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l0xx_hal_cortex.c
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:16     .text.HAL_NVIC_SetPriority:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:24     .text.HAL_NVIC_SetPriority:00000000 HAL_NVIC_SetPriority
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:144    .text.HAL_NVIC_SetPriority:00000058 $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:150    .text.HAL_NVIC_EnableIRQ:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:157    .text.HAL_NVIC_EnableIRQ:00000000 HAL_NVIC_EnableIRQ
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:199    .text.HAL_NVIC_EnableIRQ:00000014 $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:204    .text.HAL_NVIC_DisableIRQ:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:211    .text.HAL_NVIC_DisableIRQ:00000000 HAL_NVIC_DisableIRQ
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:281    .text.HAL_NVIC_DisableIRQ:0000001c $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:286    .text.HAL_NVIC_SystemReset:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:293    .text.HAL_NVIC_SystemReset:00000000 HAL_NVIC_SystemReset
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:353    .text.HAL_NVIC_SystemReset:00000014 $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:361    .text.HAL_SYSTICK_Config:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:368    .text.HAL_SYSTICK_Config:00000000 HAL_SYSTICK_Config
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:454    .text.HAL_SYSTICK_Config:00000030 $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:460    .text.HAL_NVIC_GetPriority:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:467    .text.HAL_NVIC_GetPriority:00000000 HAL_NVIC_GetPriority
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:550    .text.HAL_NVIC_GetPriority:00000044 $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:556    .text.HAL_NVIC_SetPendingIRQ:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:563    .text.HAL_NVIC_SetPendingIRQ:00000000 HAL_NVIC_SetPendingIRQ
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:604    .text.HAL_NVIC_SetPendingIRQ:00000018 $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:609    .text.HAL_NVIC_GetPendingIRQ:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:616    .text.HAL_NVIC_GetPendingIRQ:00000000 HAL_NVIC_GetPendingIRQ
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:671    .text.HAL_NVIC_GetPendingIRQ:0000001c $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:676    .text.HAL_NVIC_ClearPendingIRQ:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:683    .text.HAL_NVIC_ClearPendingIRQ:00000000 HAL_NVIC_ClearPendingIRQ
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:724    .text.HAL_NVIC_ClearPendingIRQ:00000018 $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:729    .text.HAL_SYSTICK_CLKSourceConfig:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:736    .text.HAL_SYSTICK_CLKSourceConfig:00000000 HAL_SYSTICK_CLKSourceConfig
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:772    .text.HAL_SYSTICK_CLKSourceConfig:0000001c $d
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:777    .text.HAL_SYSTICK_Callback:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:784    .text.HAL_SYSTICK_Callback:00000000 HAL_SYSTICK_Callback
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:798    .text.HAL_SYSTICK_IRQHandler:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\ccWAFGpg.s:805    .text.HAL_SYSTICK_IRQHandler:00000000 HAL_SYSTICK_IRQHandler

NO UNDEFINED SYMBOLS
