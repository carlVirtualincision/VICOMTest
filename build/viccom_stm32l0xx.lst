ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"viccom_stm32l0xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.VICCOM_stm_init,"ax",%progbits
  16              		.align	1
  17              		.global	VICCOM_stm_init
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	VICCOM_stm_init:
  25              	.LVL0:
  26              	.LFB42:
  27              		.file 1 "mcu-bsp/lib/src/viccom_stm32l0xx.c"
   1:mcu-bsp/lib/src/viccom_stm32l0xx.c **** #include <stdint.h>
   2:mcu-bsp/lib/src/viccom_stm32l0xx.c **** #include "stdbool.h"
   3:mcu-bsp/lib/src/viccom_stm32l0xx.c **** #include "stm32l011xx.h"
   4:mcu-bsp/lib/src/viccom_stm32l0xx.c **** #include "../inc/viccom.h"
   5:mcu-bsp/lib/src/viccom_stm32l0xx.c **** #include "main.h"
   6:mcu-bsp/lib/src/viccom_stm32l0xx.c **** extern UART_HandleTypeDef hlpuart1;
   7:mcu-bsp/lib/src/viccom_stm32l0xx.c **** uint8_t transmitData[20];
   8:mcu-bsp/lib/src/viccom_stm32l0xx.c **** void VICCOM_stm_init(viccom_t* state, uint8_t address) {
  28              		.loc 1 8 56 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
   9:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->address = address;
  33              		.loc 1 9 5 view .LVU1
  34              		.loc 1 9 20 is_stmt 0 view .LVU2
  35 0000 4170     		strb	r1, [r0, #1]
  10:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->addressFlag = false;
  36              		.loc 1 10 5 is_stmt 1 view .LVU3
  37              		.loc 1 10 24 is_stmt 0 view .LVU4
  38 0002 0023     		movs	r3, #0
  39 0004 8370     		strb	r3, [r0, #2]
  11:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->currentState = STATE_WAITING_FOR_ADDRESS;
  40              		.loc 1 11 5 is_stmt 1 view .LVU5
  41              		.loc 1 11 25 is_stmt 0 view .LVU6
  42 0006 4374     		strb	r3, [r0, #17]
  12:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  13:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  14:mcu-bsp/lib/src/viccom_stm32l0xx.c **** }
  43              		.loc 1 14 1 view .LVU7
  44              		@ sp needed
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 2


  45 0008 7047     		bx	lr
  46              		.cfi_endproc
  47              	.LFE42:
  49              		.section	.text.VICCOM_pdmaHandler,"ax",%progbits
  50              		.align	1
  51              		.global	VICCOM_pdmaHandler
  52              		.syntax unified
  53              		.code	16
  54              		.thumb_func
  55              		.fpu softvfp
  57              	VICCOM_pdmaHandler:
  58              	.LVL1:
  59              	.LFB43:
  15:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  16:mcu-bsp/lib/src/viccom_stm32l0xx.c **** void VICCOM_pdmaHandler(viccom_t *state) {
  60              		.loc 1 16 42 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		.loc 1 16 42 is_stmt 0 view .LVU9
  65 0000 30B5     		push	{r4, r5, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 12
  68              		.cfi_offset 4, -12
  69              		.cfi_offset 5, -8
  70              		.cfi_offset 14, -4
  17:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     if(state->txBusy) {
  71              		.loc 1 17 5 is_stmt 1 view .LVU10
  72              		.loc 1 17 13 is_stmt 0 view .LVU11
  73 0002 0378     		ldrb	r3, [r0]
  74              		.loc 1 17 7 view .LVU12
  75 0004 002B     		cmp	r3, #0
  76 0006 1DD0     		beq	.L3
  18:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         //clear transmission complete registers so it doesn't repeatedly enter interrupt handlers
  19:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         DMA1->IFCR |= 0x70;
  77              		.loc 1 19 9 is_stmt 1 view .LVU13
  78              		.loc 1 19 20 is_stmt 0 view .LVU14
  79 0008 234A     		ldr	r2, .L5
  80 000a 5368     		ldr	r3, [r2, #4]
  81 000c 7021     		movs	r1, #112
  82 000e 0B43     		orrs	r3, r1
  83 0010 5360     		str	r3, [r2, #4]
  20:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         LPUART1->ICR |= USART_ICR_TCCF;
  84              		.loc 1 20 9 is_stmt 1 view .LVU15
  85              		.loc 1 20 22 is_stmt 0 view .LVU16
  86 0012 224B     		ldr	r3, .L5+4
  87 0014 1A6A     		ldr	r2, [r3, #32]
  88 0016 3039     		subs	r1, r1, #48
  89 0018 0A43     		orrs	r2, r1
  90 001a 1A62     		str	r2, [r3, #32]
  21:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  22:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         state->txBusy = 0;
  91              		.loc 1 22 9 is_stmt 1 view .LVU17
  92              		.loc 1 22 23 is_stmt 0 view .LVU18
  93 001c 0022     		movs	r2, #0
  94 001e 0270     		strb	r2, [r0]
  23:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 3


  24:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         //disable dma as transmission is complete
  25:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         LPUART1->CR3 &= ~(USART_CR3_DMAT);
  95              		.loc 1 25 9 is_stmt 1 view .LVU19
  96              		.loc 1 25 22 is_stmt 0 view .LVU20
  97 0020 9A68     		ldr	r2, [r3, #8]
  98 0022 4031     		adds	r1, r1, #64
  99 0024 8A43     		bics	r2, r1
 100 0026 9A60     		str	r2, [r3, #8]
  26:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 101              		.loc 1 26 9 is_stmt 1 view .LVU21
 102              	.LVL2:
 103              	.LBB40:
 104              	.LBI40:
 105              		.file 2 "mcu-bsp/CMSIS/Include/core_cm0plus.h"
   1:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.7
   5:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * @date     13. March 2019
   6:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*
   8:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  10:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  12:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  16:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *
  18:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
  24:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  25:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
  30:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  31:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  34:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  36:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
  39:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  40:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
  41:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 4


  44:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:mcu-bsp/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  47:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:mcu-bsp/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  50:mcu-bsp/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:mcu-bsp/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
  53:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  54:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  55:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
  59:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
  61:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
  62:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  63:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  
  65:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:mcu-bsp/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  71:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  73:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
  76:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  78:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  82:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  83:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_FP
  85:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  87:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  88:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  92:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  93:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
  97:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
  98:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 5


 101:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 102:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 103:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 107:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 108:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 112:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 113:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 114:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 115:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 117:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 118:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 120:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 121:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 122:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 124:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 126:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 129:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 132:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 133:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 139:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 140:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 144:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 145:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 149:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 150:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 154:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 155:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 6


 158:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 159:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 160:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 161:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 163:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 165:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 169:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 172:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 174:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 177:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 182:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 184:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 185:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 186:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 196:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 199:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 200:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 201:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 205:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 206:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 207:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 208:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 210:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 211:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 212:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 213:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 214:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 7


 215:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 223:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 227:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 230:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 233:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 236:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 237:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 238:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 240:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 241:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 242:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 243:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 244:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 250:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 254:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 255:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 256:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 258:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 259:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 260:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 261:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 262:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 8


 272:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 274:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 278:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 281:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 284:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 287:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 290:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 293:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 294:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 295:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 297:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef union
 298:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 299:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   struct
 300:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 301:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 308:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 312:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 315:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 317:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 318:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 319:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 323:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 324:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 325:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 326:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 328:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 9


 329:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 330:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1[31U];
 334:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 342:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 344:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 345:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 346:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 350:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 351:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 352:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 353:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 355:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 357:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 362:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 364:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:mcu-bsp/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 372:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 376:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 379:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 382:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 385:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 10


 386:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 388:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 392:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 395:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 398:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 401:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 404:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 407:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 410:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 413:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 416:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 421:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 422:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 426:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 429:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 432:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 435:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 438:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 442:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 11


 443:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 445:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 448:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 452:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 455:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 459:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 461:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 462:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 463:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 467:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 468:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 469:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 470:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 472:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 474:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 480:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 484:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 487:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 490:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 493:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 497:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 12


 500:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 501:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 505:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 508:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 511:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 513:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 515:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 519:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 520:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 521:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 522:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 524:mcu-bsp/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 526:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:mcu-bsp/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 533:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 535:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 539:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 542:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 545:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 549:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 552:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 555:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 13


 557:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 559:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 563:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 566:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 569:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 573:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 576:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 579:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 582:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 585:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 588:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 591:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 594:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 597:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 600:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 602:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 603:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 604:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 605:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:mcu-bsp/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 610:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 611:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 613:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 14


 614:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 615:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 619:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 620:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 621:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 622:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 627:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 629:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 630:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 635:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 637:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 639:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 640:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 641:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 645:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 646:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 647:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 653:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 657:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif
 661:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 662:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 664:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 665:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 666:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 15


 671:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 674:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:mcu-bsp/CMSIS/Include/core_cm0plus.h **** */
 676:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 677:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 678:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 679:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 681:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   @{
 685:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 686:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 687:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 691:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 693:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 707:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #endif
 711:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #else
 713:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 717:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 719:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 720:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 725:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 726:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 16


 728:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 732:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:mcu-bsp/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 735:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 736:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 741:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 745:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 748:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 749:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 750:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 751:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 752:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 753:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 754:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 755:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 756:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 757:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 758:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 759:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 760:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 761:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 762:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 763:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 764:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 765:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 766:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   else
 767:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 768:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     return(0U);
 769:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 770:mcu-bsp/CMSIS/Include/core_cm0plus.h **** }
 771:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 772:mcu-bsp/CMSIS/Include/core_cm0plus.h **** 
 773:mcu-bsp/CMSIS/Include/core_cm0plus.h **** /**
 774:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 775:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 776:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 777:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 778:mcu-bsp/CMSIS/Include/core_cm0plus.h ****  */
 779:mcu-bsp/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 106              		.loc 2 779 22 view .LVU22
 107              	.LBB41:
 780:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 781:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 108              		.loc 2 781 3 view .LVU23
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 17


 782:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 109              		.loc 2 783 5 view .LVU24
 110              		.loc 2 783 20 is_stmt 0 view .LVU25
 111 0028 1D4B     		ldr	r3, .L5+8
 112 002a 8022     		movs	r2, #128
 113 002c D200     		lsls	r2, r2, #3
 114 002e 5A50     		str	r2, [r3, r1]
 784:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 115              		.loc 2 784 5 is_stmt 1 view .LVU26
 116              	.LBB42:
 117              	.LBI42:
 118              		.file 3 "mcu-bsp/CMSIS/Include/cmsis_gcc.h"
   1:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /*
   8:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  10:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  12:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  16:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  *
  18:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
  24:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  25:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  28:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  34:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  38:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
  39:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  43:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 18


  45:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  46:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  49:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  55:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  58:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  61:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  64:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  67:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  70:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  78:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  86:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
  94:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 19


 102:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 110:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 113:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 116:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 119:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 120:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 122:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 124:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 125:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 130:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 131:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 133:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 135:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 141:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 146:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 151:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     }
 155:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   }
 156:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  
 157:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 20


 159:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     }
 161:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   }
 162:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  
 163:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 165:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 166:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 168:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 169:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 172:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 173:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 176:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 177:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 180:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 181:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 184:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 185:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   @{
 189:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 190:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 191:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 192:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 196:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 198:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 200:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 201:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 202:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 203:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 207:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 209:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 211:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 212:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 213:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 214:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 21


 216:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 218:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 220:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 222:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 225:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 226:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 227:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 229:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 233:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 235:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 237:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 240:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 241:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 242:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 243:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 244:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 248:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 250:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 252:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 253:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 254:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 256:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 260:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 262:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 264:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 265:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 266:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 267:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 268:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 272:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 22


 273:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 274:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 276:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 279:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 280:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 281:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 282:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 286:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 288:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 290:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 293:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 294:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 295:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 296:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 300:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 302:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 304:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 307:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 308:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 309:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 310:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 314:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 316:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 318:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 321:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 322:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 323:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 325:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 329:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 23


 330:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 331:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 333:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 336:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 337:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 338:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 339:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 340:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 344:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 346:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 348:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 349:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 350:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 352:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 356:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 358:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 360:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 361:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 362:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 363:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 364:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 368:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 370:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 372:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 375:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 376:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 377:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 379:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 383:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 385:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 24


 387:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 390:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 391:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 392:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 393:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 394:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 398:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 400:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 402:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 403:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 404:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 406:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 410:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 412:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 414:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 415:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 416:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 417:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 419:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 423:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 425:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 427:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 430:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 431:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 432:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 433:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 437:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 439:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 441:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 442:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 443:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 25


 444:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 445:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 449:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 451:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 453:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 456:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 457:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 458:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 460:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 464:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 466:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 468:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 471:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 472:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 473:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 474:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 475:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 479:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 481:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 483:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 484:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 485:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 487:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 491:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 493:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 495:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 496:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 497:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 498:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 26


 501:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 502:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 506:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 508:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 510:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 511:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 512:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 513:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 517:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 519:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 521:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 522:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 523:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 524:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 528:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 530:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 532:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 535:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 536:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 537:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 539:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 543:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 545:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 547:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 550:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 551:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 552:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 553:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 554:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 27


 558:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 560:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 562:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 563:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 564:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 566:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 570:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 572:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 574:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 575:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 576:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 577:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 578:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 583:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 585:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 587:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 588:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 589:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 590:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 594:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 596:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 598:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 601:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 602:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 603:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 605:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 609:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 611:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 613:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 28


 615:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 616:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 617:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 618:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 619:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 620:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 624:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 626:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 628:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 629:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 630:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 632:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 636:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 638:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 640:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 641:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 642:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 646:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 647:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 650:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 651:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 656:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 659:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 661:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 666:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 670:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 671:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 29


 672:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 674:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 678:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 681:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 683:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 687:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 691:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 692:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 693:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 694:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 695:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 696:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   
 701:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 704:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 706:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 711:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 713:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 714:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 715:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 716:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 718:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 722:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 725:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 727:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 30


 729:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 731:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 733:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 734:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 735:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 736:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 737:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 738:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 743:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 746:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 748:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 753:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 757:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 758:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 759:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 760:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 762:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 766:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 769:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 771:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 775:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 779:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 780:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 781:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 782:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 783:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 784:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 31


 786:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 789:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 792:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 794:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 799:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 801:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 802:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 803:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 804:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 806:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 810:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 813:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 815:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 819:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 821:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 822:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 823:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 824:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 827:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 828:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 829:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 833:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 835:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 32


 843:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 845:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 848:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 849:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 851:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 852:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 853:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 854:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 855:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 859:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 861:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 869:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 871:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 872:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 874:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 875:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 876:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 877:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 879:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 880:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   @{
 884:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** */
 885:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 886:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #else
 894:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #endif
 898:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 899:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 33


 900:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 903:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 905:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 906:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 909:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 911:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 912:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 913:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 917:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 919:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 920:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 921:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 924:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 926:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 927:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 928:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 933:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 937:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 938:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** 
 939:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** /**
 940:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****  */
 944:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 119              		.loc 3 944 27 view .LVU27
 120              	.LBB43:
 945:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 946:mcu-bsp/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 121              		.loc 3 946 3 view .LVU28
 122              		.syntax divided
 123              	@ 946 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 124 0030 BFF34F8F 		dsb 0xF
 125              	@ 0 "" 2
 126              		.thumb
 127              		.syntax unified
 128              	.LBE43:
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 34


 129              	.LBE42:
 785:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __ISB();
 130              		.loc 2 785 5 view .LVU29
 131              	.LBB44:
 132              	.LBI44:
 933:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 133              		.loc 3 933 27 view .LVU30
 134              	.LBB45:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 135              		.loc 3 935 3 view .LVU31
 136              		.syntax divided
 137              	@ 935 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 138 0034 BFF36F8F 		isb 0xF
 139              	@ 0 "" 2
 140              	.LVL3:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 141              		.loc 3 935 3 is_stmt 0 view .LVU32
 142              		.thumb
 143              		.syntax unified
 144              	.LBE45:
 145              	.LBE44:
 146              	.LBE41:
 147              	.LBE40:
  27:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         DMA1_Channel2->CCR &= ~(DMA_CCR_EN);
 148              		.loc 1 27 9 is_stmt 1 view .LVU33
 149              		.loc 1 27 28 is_stmt 0 view .LVU34
 150 0038 1A4A     		ldr	r2, .L5+12
 151 003a 1368     		ldr	r3, [r2]
 152 003c 7F39     		subs	r1, r1, #127
 153 003e 8B43     		bics	r3, r1
 154 0040 1360     		str	r3, [r2]
 155              	.L2:
  28:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     } else {
  29:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //clear RDR flag I DON'T THINK THIS IS NECESSARY!!!!!!!!!
  30:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->RQR |= USART_RQR_RXFRQ;
  31:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //clear interrupt flags
  32:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1->IFCR |= 0x700;
  33:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->ICR |= USART_ICR_TCCF;
  34:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //disable dma for the time being due to successful payload received. 
  35:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->CR3 &= ~(USART_CR3_DMAR);
  36:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
  37:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel3->CCR &= ~(DMA_CCR_EN);
  38:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  39:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //re enable lpuart for receiving purposes
  40:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->CR1 |= USART_CR1_RXNEIE;
  41:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_EnableIRQ(LPUART1_IRQn);
  42:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  43:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //reset state to waiting for address
  44:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->currentState = STATE_WAITING_FOR_ADDRESS;
  45:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     }
  46:mcu-bsp/lib/src/viccom_stm32l0xx.c **** }
 156              		.loc 1 46 1 view .LVU35
 157              		@ sp needed
 158 0042 30BD     		pop	{r4, r5, pc}
 159              	.L3:
  30:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //clear interrupt flags
 160              		.loc 1 30 5 is_stmt 1 view .LVU36
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 35


  30:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //clear interrupt flags
 161              		.loc 1 30 18 is_stmt 0 view .LVU37
 162 0044 154B     		ldr	r3, .L5+4
 163 0046 9A69     		ldr	r2, [r3, #24]
 164 0048 0821     		movs	r1, #8
 165 004a 0A43     		orrs	r2, r1
 166 004c 9A61     		str	r2, [r3, #24]
  32:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->ICR |= USART_ICR_TCCF;
 167              		.loc 1 32 5 is_stmt 1 view .LVU38
  32:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->ICR |= USART_ICR_TCCF;
 168              		.loc 1 32 16 is_stmt 0 view .LVU39
 169 004e 1249     		ldr	r1, .L5
 170 0050 4C68     		ldr	r4, [r1, #4]
 171 0052 E022     		movs	r2, #224
 172 0054 D200     		lsls	r2, r2, #3
 173 0056 2243     		orrs	r2, r4
 174 0058 4A60     		str	r2, [r1, #4]
  33:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //disable dma for the time being due to successful payload received. 
 175              		.loc 1 33 5 is_stmt 1 view .LVU40
  33:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //disable dma for the time being due to successful payload received. 
 176              		.loc 1 33 18 is_stmt 0 view .LVU41
 177 005a 1A6A     		ldr	r2, [r3, #32]
 178 005c 4021     		movs	r1, #64
 179 005e 0A43     		orrs	r2, r1
 180 0060 1A62     		str	r2, [r3, #32]
  35:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 181              		.loc 1 35 5 is_stmt 1 view .LVU42
  35:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 182              		.loc 1 35 18 is_stmt 0 view .LVU43
 183 0062 9A68     		ldr	r2, [r3, #8]
 184 0064 8A43     		bics	r2, r1
 185 0066 9A60     		str	r2, [r3, #8]
  36:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel3->CCR &= ~(DMA_CCR_EN);
 186              		.loc 1 36 5 is_stmt 1 view .LVU44
 187              	.LVL4:
 188              	.LBB46:
 189              	.LBI46:
 779:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 190              		.loc 2 779 22 view .LVU45
 191              	.LBB47:
 781:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 192              		.loc 2 781 3 view .LVU46
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 193              		.loc 2 783 5 view .LVU47
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 194              		.loc 2 783 20 is_stmt 0 view .LVU48
 195 0068 0D49     		ldr	r1, .L5+8
 196 006a 8022     		movs	r2, #128
 197 006c 8024     		movs	r4, #128
 198 006e E400     		lsls	r4, r4, #3
 199 0070 8C50     		str	r4, [r1, r2]
 784:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __ISB();
 200              		.loc 2 784 5 is_stmt 1 view .LVU49
 201              	.LBB48:
 202              	.LBI48:
 944:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 203              		.loc 3 944 27 view .LVU50
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 36


 204              	.LBB49:
 205              		.loc 3 946 3 view .LVU51
 206              		.syntax divided
 207              	@ 946 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 208 0072 BFF34F8F 		dsb 0xF
 209              	@ 0 "" 2
 210              		.thumb
 211              		.syntax unified
 212              	.LBE49:
 213              	.LBE48:
 214              		.loc 2 785 5 view .LVU52
 215              	.LBB50:
 216              	.LBI50:
 933:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 217              		.loc 3 933 27 view .LVU53
 218              	.LBB51:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 219              		.loc 3 935 3 view .LVU54
 220              		.syntax divided
 221              	@ 935 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 222 0076 BFF36F8F 		isb 0xF
 223              	@ 0 "" 2
 224              	.LVL5:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 225              		.loc 3 935 3 is_stmt 0 view .LVU55
 226              		.thumb
 227              		.syntax unified
 228              	.LBE51:
 229              	.LBE50:
 230              	.LBE47:
 231              	.LBE46:
  37:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 232              		.loc 1 37 5 is_stmt 1 view .LVU56
  37:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 233              		.loc 1 37 24 is_stmt 0 view .LVU57
 234 007a 0B4C     		ldr	r4, .L5+16
 235 007c 2268     		ldr	r2, [r4]
 236 007e 0125     		movs	r5, #1
 237 0080 AA43     		bics	r2, r5
 238 0082 2260     		str	r2, [r4]
  40:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_EnableIRQ(LPUART1_IRQn);
 239              		.loc 1 40 5 is_stmt 1 view .LVU58
  40:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_EnableIRQ(LPUART1_IRQn);
 240              		.loc 1 40 18 is_stmt 0 view .LVU59
 241 0084 1A68     		ldr	r2, [r3]
 242 0086 2024     		movs	r4, #32
 243 0088 2243     		orrs	r2, r4
 244 008a 1A60     		str	r2, [r3]
  41:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 245              		.loc 1 41 5 is_stmt 1 view .LVU60
 246              	.LVL6:
 247              	.LBB52:
 248              	.LBI52:
 741:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 249              		.loc 2 741 22 view .LVU61
 250              	.LBB53:
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 37


 251              		.loc 2 743 3 view .LVU62
 745:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 252              		.loc 2 745 5 view .LVU63
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 253              		.loc 2 746 5 view .LVU64
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 254              		.loc 2 746 20 is_stmt 0 view .LVU65
 255 008c 8023     		movs	r3, #128
 256 008e 9B05     		lsls	r3, r3, #22
 257 0090 0B60     		str	r3, [r1]
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 258              		.loc 2 747 5 is_stmt 1 view .LVU66
 259              	.LVL7:
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 260              		.loc 2 747 5 is_stmt 0 view .LVU67
 261              	.LBE53:
 262              	.LBE52:
  44:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     }
 263              		.loc 1 44 5 is_stmt 1 view .LVU68
  44:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     }
 264              		.loc 1 44 25 is_stmt 0 view .LVU69
 265 0092 0023     		movs	r3, #0
 266 0094 4374     		strb	r3, [r0, #17]
 267              		.loc 1 46 1 view .LVU70
 268 0096 D4E7     		b	.L2
 269              	.L6:
 270              		.align	2
 271              	.L5:
 272 0098 00000240 		.word	1073872896
 273 009c 00480040 		.word	1073760256
 274 00a0 00E100E0 		.word	-536813312
 275 00a4 1C000240 		.word	1073872924
 276 00a8 30000240 		.word	1073872944
 277              		.cfi_endproc
 278              	.LFE43:
 280              		.section	.text.VICCOM_uartHandler,"ax",%progbits
 281              		.align	1
 282              		.global	VICCOM_uartHandler
 283              		.syntax unified
 284              		.code	16
 285              		.thumb_func
 286              		.fpu softvfp
 288              	VICCOM_uartHandler:
 289              	.LVL8:
 290              	.LFB44:
  47:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  48:mcu-bsp/lib/src/viccom_stm32l0xx.c **** void VICCOM_uartHandler(viccom_t *state) {
 291              		.loc 1 48 42 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		.loc 1 48 42 is_stmt 0 view .LVU72
 296 0000 70B5     		push	{r4, r5, r6, lr}
 297              	.LCFI1:
 298              		.cfi_def_cfa_offset 16
 299              		.cfi_offset 4, -16
 300              		.cfi_offset 5, -12
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 38


 301              		.cfi_offset 6, -8
 302              		.cfi_offset 14, -4
  49:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     if(state->txBusy) {
 303              		.loc 1 49 5 is_stmt 1 view .LVU73
 304              		.loc 1 49 13 is_stmt 0 view .LVU74
 305 0002 0378     		ldrb	r3, [r0]
 306              		.loc 1 49 7 view .LVU75
 307 0004 002B     		cmp	r3, #0
 308 0006 07D0     		beq	.L8
  50:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         state->txBusy = 0;
 309              		.loc 1 50 9 is_stmt 1 view .LVU76
 310              		.loc 1 50 23 is_stmt 0 view .LVU77
 311 0008 0023     		movs	r3, #0
 312 000a 0370     		strb	r3, [r0]
  51:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         LPUART1->ICR |= USART_ICR_TCCF;
 313              		.loc 1 51 9 is_stmt 1 view .LVU78
 314              		.loc 1 51 22 is_stmt 0 view .LVU79
 315 000c 2B4A     		ldr	r2, .L11
 316 000e 136A     		ldr	r3, [r2, #32]
 317 0010 4021     		movs	r1, #64
 318 0012 0B43     		orrs	r3, r1
 319 0014 1362     		str	r3, [r2, #32]
 320              	.LVL9:
 321              	.L7:
  52:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     } else {
  53:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         uint16_t data = LPUART1->RDR;
  54:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         if(state->currentState == STATE_WAITING_FOR_ADDRESS && data & 0x100) {
  55:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // we received an address byte
  56:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             if((data & 0xff) == state->address) {
  57:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // this is a packet for us
  58:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             state->currentState = STATE_WAITING_FOR_LENGTH;
  59:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             } 
  60:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         } else if (state->currentState == STATE_WAITING_FOR_LENGTH && !(data & 0x100)) {
  61:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         // this is a length value with correct address bit
  62:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             state->rxLength = data & 0xff;
  63:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             state->currentState = STATE_WAITING_FOR_DMA_DONE;
  64:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  65:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //disable lpuart interrupt
  66:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             NVIC_DisableIRQ(LPUART1_IRQn);
  67:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             LPUART1->CR1 &= ~(USART_CR1_RXNEIE);
  68:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  69:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable DMA stuff
  70:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //map dma channel to LPUART rx, or 0x500
  71:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_CSELR->CSELR |=  0x500;
  72:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_CSELR->CSELR &= ~(0xA00); 
  73:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //set address for where to get data from as LPUART1->RDR
  74:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CPAR = (uint32_t)&LPUART1->RDR;
  75:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //Set memory address for where to store data
  76:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CMAR = (uint32_t)&state->rxData;
  77:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //length of data to store
  78:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CNDTR = 2;
  79:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable TCIE
  80:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CCR |= DMA_CCR_TCIE;
  81:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //set direction to 0 (peripheral to memory)
  82:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CCR &= ~(DMA_CCR_DIR);
  83:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable minc so that it increments address with each transfer
  84:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CCR |= DMA_MINC_ENABLE;
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 39


  85:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable DMA
  86:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             LPUART1->CR3 |= USART_CR3_DMAR;
  87:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
  88:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CCR |= DMA_CCR_EN;
  89:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  90:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  91:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         }
  92:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     }
  93:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  94:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     return;
  95:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  96:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  97:mcu-bsp/lib/src/viccom_stm32l0xx.c **** }
 322              		.loc 1 97 1 view .LVU80
 323              		@ sp needed
 324 0016 70BD     		pop	{r4, r5, r6, pc}
 325              	.LVL10:
 326              	.L8:
 327              	.LBB54:
  53:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         if(state->currentState == STATE_WAITING_FOR_ADDRESS && data & 0x100) {
 328              		.loc 1 53 9 is_stmt 1 view .LVU81
  53:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         if(state->currentState == STATE_WAITING_FOR_ADDRESS && data & 0x100) {
 329              		.loc 1 53 32 is_stmt 0 view .LVU82
 330 0018 284B     		ldr	r3, .L11
 331 001a 5A6A     		ldr	r2, [r3, #36]
 332              	.LVL11:
  54:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // we received an address byte
 333              		.loc 1 54 9 is_stmt 1 view .LVU83
  54:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // we received an address byte
 334              		.loc 1 54 17 is_stmt 0 view .LVU84
 335 001c 437C     		ldrb	r3, [r0, #17]
  54:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // we received an address byte
 336              		.loc 1 54 11 view .LVU85
 337 001e 002B     		cmp	r3, #0
 338 0020 0BD1     		bne	.L10
  54:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // we received an address byte
 339              		.loc 1 54 69 discriminator 1 view .LVU86
 340 0022 1104     		lsls	r1, r2, #16
 341 0024 0C0C     		lsrs	r4, r1, #16
  54:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // we received an address byte
 342              		.loc 1 54 61 discriminator 1 view .LVU87
 343 0026 C901     		lsls	r1, r1, #7
 344 0028 07D5     		bpl	.L10
  56:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // this is a packet for us
 345              		.loc 1 56 13 is_stmt 1 view .LVU88
  56:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // this is a packet for us
 346              		.loc 1 56 22 is_stmt 0 view .LVU89
 347 002a FF33     		adds	r3, r3, #255
 348 002c 2340     		ands	r3, r4
  56:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // this is a packet for us
 349              		.loc 1 56 38 view .LVU90
 350 002e 4278     		ldrb	r2, [r0, #1]
 351              	.LVL12:
  56:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             // this is a packet for us
 352              		.loc 1 56 15 view .LVU91
 353 0030 9342     		cmp	r3, r2
 354 0032 F0D1     		bne	.L7
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 40


  58:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             } 
 355              		.loc 1 58 13 is_stmt 1 view .LVU92
  58:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             } 
 356              		.loc 1 58 33 is_stmt 0 view .LVU93
 357 0034 0123     		movs	r3, #1
 358 0036 4374     		strb	r3, [r0, #17]
 359 0038 EDE7     		b	.L7
 360              	.LVL13:
 361              	.L10:
  60:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         // this is a length value with correct address bit
 362              		.loc 1 60 16 is_stmt 1 view .LVU94
  60:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         // this is a length value with correct address bit
 363              		.loc 1 60 19 is_stmt 0 view .LVU95
 364 003a 012B     		cmp	r3, #1
 365 003c EBD1     		bne	.L7
  60:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         // this is a length value with correct address bit
 366              		.loc 1 60 78 discriminator 1 view .LVU96
 367 003e 1204     		lsls	r2, r2, #16
 368              	.LVL14:
  60:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         // this is a length value with correct address bit
 369              		.loc 1 60 78 discriminator 1 view .LVU97
 370 0040 110C     		lsrs	r1, r2, #16
  60:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         // this is a length value with correct address bit
 371              		.loc 1 60 68 discriminator 1 view .LVU98
 372 0042 D301     		lsls	r3, r2, #7
 373 0044 E7D4     		bmi	.L7
  62:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             state->currentState = STATE_WAITING_FOR_DMA_DONE;
 374              		.loc 1 62 13 is_stmt 1 view .LVU99
  62:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             state->currentState = STATE_WAITING_FOR_DMA_DONE;
 375              		.loc 1 62 36 is_stmt 0 view .LVU100
 376 0046 FF23     		movs	r3, #255
 377 0048 0B40     		ands	r3, r1
  62:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             state->currentState = STATE_WAITING_FOR_DMA_DONE;
 378              		.loc 1 62 29 view .LVU101
 379 004a C360     		str	r3, [r0, #12]
  63:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 380              		.loc 1 63 13 is_stmt 1 view .LVU102
  63:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 381              		.loc 1 63 33 is_stmt 0 view .LVU103
 382 004c 0423     		movs	r3, #4
 383 004e 4374     		strb	r3, [r0, #17]
  66:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             LPUART1->CR1 &= ~(USART_CR1_RXNEIE);
 384              		.loc 1 66 13 is_stmt 1 view .LVU104
 385              	.LVL15:
 386              	.LBB55:
 387              	.LBI55:
 779:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 388              		.loc 2 779 22 view .LVU105
 389              	.LBB56:
 781:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 390              		.loc 2 781 3 view .LVU106
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 391              		.loc 2 783 5 view .LVU107
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 392              		.loc 2 783 20 is_stmt 0 view .LVU108
 393 0050 1B4C     		ldr	r4, .L11+4
 394 0052 8026     		movs	r6, #128
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 41


 395 0054 8023     		movs	r3, #128
 396 0056 9B05     		lsls	r3, r3, #22
 397 0058 A351     		str	r3, [r4, r6]
 784:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __ISB();
 398              		.loc 2 784 5 is_stmt 1 view .LVU109
 399              	.LBB57:
 400              	.LBI57:
 944:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 401              		.loc 3 944 27 view .LVU110
 402              	.LBB58:
 403              		.loc 3 946 3 view .LVU111
 404              		.syntax divided
 405              	@ 946 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 406 005a BFF34F8F 		dsb 0xF
 407              	@ 0 "" 2
 408              		.thumb
 409              		.syntax unified
 410              	.LBE58:
 411              	.LBE57:
 412              		.loc 2 785 5 view .LVU112
 413              	.LBB59:
 414              	.LBI59:
 933:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 415              		.loc 3 933 27 view .LVU113
 416              	.LBB60:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 417              		.loc 3 935 3 view .LVU114
 418              		.syntax divided
 419              	@ 935 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 420 005e BFF36F8F 		isb 0xF
 421              	@ 0 "" 2
 422              	.LVL16:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 423              		.loc 3 935 3 is_stmt 0 view .LVU115
 424              		.thumb
 425              		.syntax unified
 426              	.LBE60:
 427              	.LBE59:
 428              	.LBE56:
 429              	.LBE55:
  67:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 430              		.loc 1 67 13 is_stmt 1 view .LVU116
  67:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 431              		.loc 1 67 26 is_stmt 0 view .LVU117
 432 0062 164A     		ldr	r2, .L11
 433 0064 1368     		ldr	r3, [r2]
 434 0066 2021     		movs	r1, #32
 435 0068 8B43     		bics	r3, r1
 436 006a 1360     		str	r3, [r2]
  71:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_CSELR->CSELR &= ~(0xA00); 
 437              		.loc 1 71 13 is_stmt 1 view .LVU118
  71:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_CSELR->CSELR &= ~(0xA00); 
 438              		.loc 1 71 31 is_stmt 0 view .LVU119
 439 006c 154B     		ldr	r3, .L11+8
 440 006e 1D68     		ldr	r5, [r3]
 441 0070 A021     		movs	r1, #160
 442 0072 C900     		lsls	r1, r1, #3
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 42


 443 0074 2943     		orrs	r1, r5
 444 0076 1960     		str	r1, [r3]
  72:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //set address for where to get data from as LPUART1->RDR
 445              		.loc 1 72 13 is_stmt 1 view .LVU120
  72:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //set address for where to get data from as LPUART1->RDR
 446              		.loc 1 72 31 is_stmt 0 view .LVU121
 447 0078 1D68     		ldr	r5, [r3]
 448 007a 1349     		ldr	r1, .L11+12
 449 007c 0D40     		ands	r5, r1
 450 007e 1D60     		str	r5, [r3]
  74:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //Set memory address for where to store data
 451              		.loc 1 74 13 is_stmt 1 view .LVU122
  74:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //Set memory address for where to store data
 452              		.loc 1 74 33 is_stmt 0 view .LVU123
 453 0080 124B     		ldr	r3, .L11+16
 454 0082 1349     		ldr	r1, .L11+20
 455 0084 9960     		str	r1, [r3, #8]
  76:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //length of data to store
 456              		.loc 1 76 13 is_stmt 1 view .LVU124
  76:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //length of data to store
 457              		.loc 1 76 45 is_stmt 0 view .LVU125
 458 0086 0830     		adds	r0, r0, #8
 459              	.LVL17:
  76:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //length of data to store
 460              		.loc 1 76 33 view .LVU126
 461 0088 D860     		str	r0, [r3, #12]
  78:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable TCIE
 462              		.loc 1 78 13 is_stmt 1 view .LVU127
  78:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable TCIE
 463              		.loc 1 78 34 is_stmt 0 view .LVU128
 464 008a 0221     		movs	r1, #2
 465 008c 5960     		str	r1, [r3, #4]
  80:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //set direction to 0 (peripheral to memory)
 466              		.loc 1 80 13 is_stmt 1 view .LVU129
  80:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //set direction to 0 (peripheral to memory)
 467              		.loc 1 80 32 is_stmt 0 view .LVU130
 468 008e 1868     		ldr	r0, [r3]
 469              	.LVL18:
  80:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //set direction to 0 (peripheral to memory)
 470              		.loc 1 80 32 view .LVU131
 471 0090 0843     		orrs	r0, r1
 472 0092 1860     		str	r0, [r3]
  82:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable minc so that it increments address with each transfer
 473              		.loc 1 82 13 is_stmt 1 view .LVU132
  82:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable minc so that it increments address with each transfer
 474              		.loc 1 82 32 is_stmt 0 view .LVU133
 475 0094 1868     		ldr	r0, [r3]
 476 0096 0E31     		adds	r1, r1, #14
 477 0098 8843     		bics	r0, r1
 478 009a 1860     		str	r0, [r3]
  84:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable DMA
 479              		.loc 1 84 13 is_stmt 1 view .LVU134
  84:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             //enable DMA
 480              		.loc 1 84 32 is_stmt 0 view .LVU135
 481 009c 1968     		ldr	r1, [r3]
 482 009e 3143     		orrs	r1, r6
 483 00a0 1960     		str	r1, [r3]
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 43


  86:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 484              		.loc 1 86 13 is_stmt 1 view .LVU136
  86:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 485              		.loc 1 86 26 is_stmt 0 view .LVU137
 486 00a2 9168     		ldr	r1, [r2, #8]
 487 00a4 4020     		movs	r0, #64
 488 00a6 0143     		orrs	r1, r0
 489 00a8 9160     		str	r1, [r2, #8]
  87:mcu-bsp/lib/src/viccom_stm32l0xx.c ****             DMA1_Channel3->CCR |= DMA_CCR_EN;
 490              		.loc 1 87 13 is_stmt 1 view .LVU138
 491              	.LVL19:
 492              	.LBB61:
 493              	.LBI61:
 741:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 494              		.loc 2 741 22 view .LVU139
 495              	.LBB62:
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 496              		.loc 2 743 3 view .LVU140
 745:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 497              		.loc 2 745 5 view .LVU141
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 498              		.loc 2 746 5 view .LVU142
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 499              		.loc 2 746 20 is_stmt 0 view .LVU143
 500 00aa 8022     		movs	r2, #128
 501 00ac D200     		lsls	r2, r2, #3
 502 00ae 2260     		str	r2, [r4]
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 503              		.loc 2 747 5 is_stmt 1 view .LVU144
 504              	.LVL20:
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 505              		.loc 2 747 5 is_stmt 0 view .LVU145
 506              	.LBE62:
 507              	.LBE61:
  88:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 508              		.loc 1 88 13 is_stmt 1 view .LVU146
  88:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 509              		.loc 1 88 32 is_stmt 0 view .LVU147
 510 00b0 1A68     		ldr	r2, [r3]
 511 00b2 0121     		movs	r1, #1
 512 00b4 0A43     		orrs	r2, r1
 513 00b6 1A60     		str	r2, [r3]
 514              	.LBE54:
  94:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 515              		.loc 1 94 5 is_stmt 1 view .LVU148
 516 00b8 ADE7     		b	.L7
 517              	.L12:
 518 00ba C046     		.align	2
 519              	.L11:
 520 00bc 00480040 		.word	1073760256
 521 00c0 00E100E0 		.word	-536813312
 522 00c4 A8000240 		.word	1073873064
 523 00c8 FFF5FFFF 		.word	-2561
 524 00cc 30000240 		.word	1073872944
 525 00d0 24480040 		.word	1073760292
 526              		.cfi_endproc
 527              	.LFE44:
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 44


 529              		.section	.text.VICCOM_send,"ax",%progbits
 530              		.align	1
 531              		.global	VICCOM_send
 532              		.syntax unified
 533              		.code	16
 534              		.thumb_func
 535              		.fpu softvfp
 537              	VICCOM_send:
 538              	.LVL21:
 539              	.LFB45:
  98:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
  99:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 100:mcu-bsp/lib/src/viccom_stm32l0xx.c **** void VICCOM_send(viccom_t* state, uint8_t* data, int len) {
 540              		.loc 1 100 59 view -0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		.loc 1 100 59 is_stmt 0 view .LVU150
 545 0000 70B5     		push	{r4, r5, r6, lr}
 546              	.LCFI2:
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 4, -16
 549              		.cfi_offset 5, -12
 550              		.cfi_offset 6, -8
 551              		.cfi_offset 14, -4
 101:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //if this is first thing MCU does, TC = 1 so must clear it
 102:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->ICR |= USART_ICR_TCCF;
 552              		.loc 1 102 5 is_stmt 1 view .LVU151
 553              		.loc 1 102 18 is_stmt 0 view .LVU152
 554 0002 364B     		ldr	r3, .L22
 555 0004 196A     		ldr	r1, [r3, #32]
 556              	.LVL22:
 557              		.loc 1 102 18 view .LVU153
 558 0006 4024     		movs	r4, #64
 559 0008 2143     		orrs	r1, r4
 560 000a 1962     		str	r1, [r3, #32]
 103:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 104:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //enable lpuart1 irq if it isnt' already. 
 105:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_EnableIRQ(LPUART1_IRQn);
 561              		.loc 1 105 5 is_stmt 1 view .LVU154
 562              	.LVL23:
 563              	.LBB63:
 564              	.LBI63:
 741:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 565              		.loc 2 741 22 view .LVU155
 566              	.LBB64:
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 567              		.loc 2 743 3 view .LVU156
 745:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 568              		.loc 2 745 5 view .LVU157
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 569              		.loc 2 746 5 view .LVU158
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 570              		.loc 2 746 20 is_stmt 0 view .LVU159
 571 000c 344A     		ldr	r2, .L22+4
 572              	.LVL24:
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 45


 573              		.loc 2 746 20 view .LVU160
 574 000e 8021     		movs	r1, #128
 575 0010 8905     		lsls	r1, r1, #22
 576 0012 1160     		str	r1, [r2]
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 577              		.loc 2 747 5 is_stmt 1 view .LVU161
 578              	.LVL25:
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 579              		.loc 2 747 5 is_stmt 0 view .LVU162
 580              	.LBE64:
 581              	.LBE63:
 106:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->CR1 |= USART_CR1_TCIE;
 582              		.loc 1 106 5 is_stmt 1 view .LVU163
 583              		.loc 1 106 18 is_stmt 0 view .LVU164
 584 0014 1A68     		ldr	r2, [r3]
 585 0016 2243     		orrs	r2, r4
 586 0018 1A60     		str	r2, [r3]
 107:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 108:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //transmit address over lpuart
 109:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     uint16_t transmitAddress = state->address | 0x100;
 587              		.loc 1 109 5 is_stmt 1 view .LVU165
 588              		.loc 1 109 37 is_stmt 0 view .LVU166
 589 001a 4178     		ldrb	r1, [r0, #1]
 590              		.loc 1 109 14 view .LVU167
 591 001c 8022     		movs	r2, #128
 592 001e 5200     		lsls	r2, r2, #1
 593 0020 0A43     		orrs	r2, r1
 594              	.LVL26:
 110:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //set tx to busy. IS THIS THE RIGHT PLACE???????!!!!!!
 111:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->txBusy = 1;
 595              		.loc 1 111 5 is_stmt 1 view .LVU168
 596              		.loc 1 111 19 is_stmt 0 view .LVU169
 597 0022 0121     		movs	r1, #1
 598 0024 0170     		strb	r1, [r0]
 112:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->TDR = transmitAddress;
 599              		.loc 1 112 5 is_stmt 1 view .LVU170
 600              		.loc 1 112 18 is_stmt 0 view .LVU171
 601 0026 9A62     		str	r2, [r3, #40]
 113:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 114:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     while((LPUART1->ISR & USART_ISR_TC) || state->txBusy) {}; 
 602              		.loc 1 114 5 is_stmt 1 view .LVU172
 603              	.L14:
 604              		.loc 1 114 60 discriminator 3 view .LVU173
 605              		.loc 1 114 10 discriminator 3 view .LVU174
 606              		.loc 1 114 19 is_stmt 0 discriminator 3 view .LVU175
 607 0028 2C4B     		ldr	r3, .L22
 608 002a DB69     		ldr	r3, [r3, #28]
 609              		.loc 1 114 10 discriminator 3 view .LVU176
 610 002c 5B06     		lsls	r3, r3, #25
 611 002e FBD4     		bmi	.L14
 612              		.loc 1 114 49 discriminator 2 view .LVU177
 613 0030 0378     		ldrb	r3, [r0]
 614              		.loc 1 114 41 discriminator 2 view .LVU178
 615 0032 002B     		cmp	r3, #0
 616 0034 F8D1     		bne	.L14
 617              		.loc 1 114 61 is_stmt 1 discriminator 4 view .LVU179
 115:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 46


 116:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //after that's done, transmit length over lpuart
 117:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     uint16_t transmitLength = 0x05;
 618              		.loc 1 117 5 discriminator 4 view .LVU180
 619              	.LVL27:
 118:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->txBusy = 1;
 620              		.loc 1 118 5 discriminator 4 view .LVU181
 621              		.loc 1 118 19 is_stmt 0 discriminator 4 view .LVU182
 622 0036 0133     		adds	r3, r3, #1
 623 0038 0370     		strb	r3, [r0]
 119:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->TDR = transmitLength;
 624              		.loc 1 119 5 is_stmt 1 discriminator 4 view .LVU183
 625              		.loc 1 119 18 is_stmt 0 discriminator 4 view .LVU184
 626 003a 284B     		ldr	r3, .L22
 627 003c 0522     		movs	r2, #5
 628              	.LVL28:
 629              		.loc 1 119 18 discriminator 4 view .LVU185
 630 003e 9A62     		str	r2, [r3, #40]
 120:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 121:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     while((LPUART1->ISR & USART_ISR_TC) || state->txBusy) {}; 
 631              		.loc 1 121 5 is_stmt 1 discriminator 4 view .LVU186
 632              	.L16:
 633              		.loc 1 121 60 discriminator 3 view .LVU187
 634              		.loc 1 121 10 discriminator 3 view .LVU188
 635              		.loc 1 121 19 is_stmt 0 discriminator 3 view .LVU189
 636 0040 264B     		ldr	r3, .L22
 637 0042 DB69     		ldr	r3, [r3, #28]
 638              		.loc 1 121 10 discriminator 3 view .LVU190
 639 0044 5B06     		lsls	r3, r3, #25
 640 0046 FBD4     		bmi	.L16
 641              		.loc 1 121 49 discriminator 2 view .LVU191
 642 0048 0378     		ldrb	r3, [r0]
 643              		.loc 1 121 41 discriminator 2 view .LVU192
 644 004a 002B     		cmp	r3, #0
 645 004c F8D1     		bne	.L16
 646 004e 02E0     		b	.L18
 647              	.LVL29:
 648              	.L19:
 649              	.LBB65:
 122:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 123:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //transmit payload over dma
 124:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     for(int i = 0; i < 20; i++) {
 125:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         transmitData[i] = i;
 650              		.loc 1 125 9 is_stmt 1 discriminator 3 view .LVU193
 651              		.loc 1 125 25 is_stmt 0 discriminator 3 view .LVU194
 652 0050 244A     		ldr	r2, .L22+8
 653 0052 D354     		strb	r3, [r2, r3]
 124:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         transmitData[i] = i;
 654              		.loc 1 124 28 is_stmt 1 discriminator 3 view .LVU195
 124:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         transmitData[i] = i;
 655              		.loc 1 124 29 is_stmt 0 discriminator 3 view .LVU196
 656 0054 0133     		adds	r3, r3, #1
 657              	.LVL30:
 658              	.L18:
 124:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         transmitData[i] = i;
 659              		.loc 1 124 20 is_stmt 1 discriminator 1 view .LVU197
 124:mcu-bsp/lib/src/viccom_stm32l0xx.c ****         transmitData[i] = i;
 660              		.loc 1 124 5 is_stmt 0 discriminator 1 view .LVU198
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 47


 661 0056 132B     		cmp	r3, #19
 662 0058 FADD     		ble	.L19
 663              	.LBE65:
 126:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     }
 127:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 128:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //disable lpuart interrupt
 129:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_DisableIRQ(LPUART1_IRQn);
 664              		.loc 1 129 5 is_stmt 1 view .LVU199
 665              	.LVL31:
 666              	.LBB66:
 667              	.LBI66:
 779:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 668              		.loc 2 779 22 view .LVU200
 669              	.LBB67:
 781:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 670              		.loc 2 781 3 view .LVU201
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 671              		.loc 2 783 5 view .LVU202
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 672              		.loc 2 783 20 is_stmt 0 view .LVU203
 673 005a 214D     		ldr	r5, .L22+4
 674 005c 8024     		movs	r4, #128
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 675              		.loc 2 783 20 view .LVU204
 676 005e 8023     		movs	r3, #128
 677              	.LVL32:
 783:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __DSB();
 678              		.loc 2 783 20 view .LVU205
 679 0060 9B05     		lsls	r3, r3, #22
 680 0062 2B51     		str	r3, [r5, r4]
 784:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __ISB();
 681              		.loc 2 784 5 is_stmt 1 view .LVU206
 682              	.LBB68:
 683              	.LBI68:
 944:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 684              		.loc 3 944 27 view .LVU207
 685              	.LBB69:
 686              		.loc 3 946 3 view .LVU208
 687              		.syntax divided
 688              	@ 946 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 689 0064 BFF34F8F 		dsb 0xF
 690              	@ 0 "" 2
 691              		.thumb
 692              		.syntax unified
 693              	.LBE69:
 694              	.LBE68:
 695              		.loc 2 785 5 view .LVU209
 696              	.LBB70:
 697              	.LBI70:
 933:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** {
 698              		.loc 3 933 27 view .LVU210
 699              	.LBB71:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 700              		.loc 3 935 3 view .LVU211
 701              		.syntax divided
 702              	@ 935 "mcu-bsp/CMSIS/Include/cmsis_gcc.h" 1
 703 0068 BFF36F8F 		isb 0xF
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 48


 704              	@ 0 "" 2
 705              	.LVL33:
 935:mcu-bsp/CMSIS/Include/cmsis_gcc.h **** }
 706              		.loc 3 935 3 is_stmt 0 view .LVU212
 707              		.thumb
 708              		.syntax unified
 709              	.LBE71:
 710              	.LBE70:
 711              	.LBE67:
 712              	.LBE66:
 130:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->CR1 &= ~(USART_CR1_TCIE);
 713              		.loc 1 130 5 is_stmt 1 view .LVU213
 714              		.loc 1 130 18 is_stmt 0 view .LVU214
 715 006c 1B4A     		ldr	r2, .L22
 716 006e 1368     		ldr	r3, [r2]
 717 0070 4021     		movs	r1, #64
 718 0072 8B43     		bics	r3, r1
 719 0074 1360     		str	r3, [r2]
 131:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 132:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //enable DMA stuff
 133:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //map dma channel to LPUART rx, or 0x500
 134:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_CSELR->CSELR |=  0x50;
 720              		.loc 1 134 5 is_stmt 1 view .LVU215
 721              		.loc 1 134 23 is_stmt 0 view .LVU216
 722 0076 1C4B     		ldr	r3, .L22+12
 723 0078 1968     		ldr	r1, [r3]
 724 007a 5026     		movs	r6, #80
 725 007c 3143     		orrs	r1, r6
 726 007e 1960     		str	r1, [r3]
 135:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_CSELR->CSELR &= ~(0xA0); 
 727              		.loc 1 135 5 is_stmt 1 view .LVU217
 728              		.loc 1 135 23 is_stmt 0 view .LVU218
 729 0080 1968     		ldr	r1, [r3]
 730 0082 5036     		adds	r6, r6, #80
 731 0084 B143     		bics	r1, r6
 732 0086 1960     		str	r1, [r3]
 136:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //set address for where to get data from as LPUART1->TDR
 137:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CPAR = (uint32_t)&LPUART1->TDR;
 733              		.loc 1 137 5 is_stmt 1 view .LVU219
 734              		.loc 1 137 25 is_stmt 0 view .LVU220
 735 0088 184B     		ldr	r3, .L22+16
 736 008a 1949     		ldr	r1, .L22+20
 737 008c 9960     		str	r1, [r3, #8]
 138:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //Set memory address for where to store data
 139:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CMAR = (uint32_t)&transmitData;
 738              		.loc 1 139 5 is_stmt 1 view .LVU221
 739              		.loc 1 139 27 is_stmt 0 view .LVU222
 740 008e 1549     		ldr	r1, .L22+8
 741              		.loc 1 139 25 view .LVU223
 742 0090 D960     		str	r1, [r3, #12]
 140:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //length of data to store
 141:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CNDTR = 20;
 743              		.loc 1 141 5 is_stmt 1 view .LVU224
 744              		.loc 1 141 26 is_stmt 0 view .LVU225
 745 0092 1421     		movs	r1, #20
 746 0094 5960     		str	r1, [r3, #4]
 142:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //enable TCIE
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 49


 143:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 747              		.loc 1 143 5 is_stmt 1 view .LVU226
 748              		.loc 1 143 24 is_stmt 0 view .LVU227
 749 0096 1968     		ldr	r1, [r3]
 750 0098 9E3E     		subs	r6, r6, #158
 751 009a 3143     		orrs	r1, r6
 752 009c 1960     		str	r1, [r3]
 144:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //set direction to 1 (memory to peripheral)
 145:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CCR |= DMA_CCR_DIR;
 753              		.loc 1 145 5 is_stmt 1 view .LVU228
 754              		.loc 1 145 24 is_stmt 0 view .LVU229
 755 009e 1968     		ldr	r1, [r3]
 756 00a0 0E36     		adds	r6, r6, #14
 757 00a2 3143     		orrs	r1, r6
 758 00a4 1960     		str	r1, [r3]
 146:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //enable minc so that it increments address with each transfer
 147:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CCR |= DMA_MINC_ENABLE;
 759              		.loc 1 147 5 is_stmt 1 view .LVU230
 760              		.loc 1 147 24 is_stmt 0 view .LVU231
 761 00a6 1968     		ldr	r1, [r3]
 762 00a8 2143     		orrs	r1, r4
 763 00aa 1960     		str	r1, [r3]
 148:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //set msize to 16, not 8
 149:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     // DMA1_Channel2->CCR |= DMA_CCR_MSIZE_0;
 150:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //set msize to 16, not 8
 151:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CCR |= DMA_CCR_PSIZE_0;
 764              		.loc 1 151 5 is_stmt 1 view .LVU232
 765              		.loc 1 151 24 is_stmt 0 view .LVU233
 766 00ac 1E68     		ldr	r6, [r3]
 767 00ae 8021     		movs	r1, #128
 768 00b0 4900     		lsls	r1, r1, #1
 769 00b2 3143     		orrs	r1, r6
 770 00b4 1960     		str	r1, [r3]
 152:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     //enable DMA
 153:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     LPUART1->CR3 |= USART_CR3_DMAT;
 771              		.loc 1 153 5 is_stmt 1 view .LVU234
 772              		.loc 1 153 18 is_stmt 0 view .LVU235
 773 00b6 9168     		ldr	r1, [r2, #8]
 774 00b8 2143     		orrs	r1, r4
 775 00ba 9160     		str	r1, [r2, #8]
 154:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 776              		.loc 1 154 5 is_stmt 1 view .LVU236
 777              	.LVL34:
 778              	.LBB72:
 779              	.LBI72:
 741:mcu-bsp/CMSIS/Include/core_cm0plus.h **** {
 780              		.loc 2 741 22 view .LVU237
 781              	.LBB73:
 743:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   {
 782              		.loc 2 743 3 view .LVU238
 745:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 783              		.loc 2 745 5 view .LVU239
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 784              		.loc 2 746 5 view .LVU240
 746:mcu-bsp/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 785              		.loc 2 746 20 is_stmt 0 view .LVU241
 786 00bc 8022     		movs	r2, #128
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 50


 787 00be D200     		lsls	r2, r2, #3
 788 00c0 2A60     		str	r2, [r5]
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 789              		.loc 2 747 5 is_stmt 1 view .LVU242
 790              	.LVL35:
 747:mcu-bsp/CMSIS/Include/core_cm0plus.h ****   }
 791              		.loc 2 747 5 is_stmt 0 view .LVU243
 792              	.LBE73:
 793              	.LBE72:
 155:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->txBusy = 1;
 794              		.loc 1 155 5 is_stmt 1 view .LVU244
 795              		.loc 1 155 19 is_stmt 0 view .LVU245
 796 00c2 0121     		movs	r1, #1
 797 00c4 0170     		strb	r1, [r0]
 156:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     DMA1_Channel2->CCR |= DMA_CCR_EN;
 798              		.loc 1 156 5 is_stmt 1 view .LVU246
 799              		.loc 1 156 24 is_stmt 0 view .LVU247
 800 00c6 1A68     		ldr	r2, [r3]
 801 00c8 0A43     		orrs	r2, r1
 802 00ca 1A60     		str	r2, [r3]
 157:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 158:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     while((DMA_ISR_TCIF2 & DMA1->ISR) || state->txBusy) {};
 803              		.loc 1 158 5 is_stmt 1 view .LVU248
 804              	.L20:
 805              		.loc 1 158 58 discriminator 3 view .LVU249
 806              		.loc 1 158 10 discriminator 3 view .LVU250
 807              		.loc 1 158 32 is_stmt 0 discriminator 3 view .LVU251
 808 00cc 094B     		ldr	r3, .L22+24
 809 00ce 1B68     		ldr	r3, [r3]
 810              		.loc 1 158 10 discriminator 3 view .LVU252
 811 00d0 9B06     		lsls	r3, r3, #26
 812 00d2 FBD4     		bmi	.L20
 813              		.loc 1 158 47 discriminator 2 view .LVU253
 814 00d4 0378     		ldrb	r3, [r0]
 815              		.loc 1 158 39 discriminator 2 view .LVU254
 816 00d6 002B     		cmp	r3, #0
 817 00d8 F8D1     		bne	.L20
 159:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 160:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     return;
 161:mcu-bsp/lib/src/viccom_stm32l0xx.c **** }
 818              		.loc 1 161 1 view .LVU255
 819              		@ sp needed
 820              		.loc 1 161 1 view .LVU256
 821 00da 70BD     		pop	{r4, r5, r6, pc}
 822              	.L23:
 823              		.align	2
 824              	.L22:
 825 00dc 00480040 		.word	1073760256
 826 00e0 00E100E0 		.word	-536813312
 827 00e4 00000000 		.word	.LANCHOR0
 828 00e8 A8000240 		.word	1073873064
 829 00ec 1C000240 		.word	1073872924
 830 00f0 28480040 		.word	1073760296
 831 00f4 00000240 		.word	1073872896
 832              		.cfi_endproc
 833              	.LFE45:
 835              		.section	.text.VICCOM_getBuffer,"ax",%progbits
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 51


 836              		.align	1
 837              		.global	VICCOM_getBuffer
 838              		.syntax unified
 839              		.code	16
 840              		.thumb_func
 841              		.fpu softvfp
 843              	VICCOM_getBuffer:
 844              	.LVL36:
 845              	.LFB46:
 162:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 163:mcu-bsp/lib/src/viccom_stm32l0xx.c **** viccom_rx_t VICCOM_getBuffer(viccom_t* state) {
 846              		.loc 1 163 47 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 850              		@ link register save eliminated.
 164:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     viccom_rx_t rx = {.data = state->rxData, .length = state->rxLength};
 851              		.loc 1 164 5 view .LVU258
 852              		.loc 1 164 31 is_stmt 0 view .LVU259
 853 0000 0B00     		movs	r3, r1
 854 0002 0833     		adds	r3, r3, #8
 855              		.loc 1 164 17 view .LVU260
 856 0004 0360     		str	r3, [r0]
 857 0006 CB68     		ldr	r3, [r1, #12]
 858 0008 4360     		str	r3, [r0, #4]
 165:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     state->dataAvailable = false;
 859              		.loc 1 165 5 is_stmt 1 view .LVU261
 860              		.loc 1 165 26 is_stmt 0 view .LVU262
 861 000a 0023     		movs	r3, #0
 862 000c 0B74     		strb	r3, [r1, #16]
 166:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     return rx;
 863              		.loc 1 166 5 is_stmt 1 view .LVU263
 167:mcu-bsp/lib/src/viccom_stm32l0xx.c **** }
 864              		.loc 1 167 1 is_stmt 0 view .LVU264
 865              		@ sp needed
 866 000e 7047     		bx	lr
 867              		.cfi_endproc
 868              	.LFE46:
 870              		.section	.text.VICCOM_dataAvailable,"ax",%progbits
 871              		.align	1
 872              		.global	VICCOM_dataAvailable
 873              		.syntax unified
 874              		.code	16
 875              		.thumb_func
 876              		.fpu softvfp
 878              	VICCOM_dataAvailable:
 879              	.LVL37:
 880              	.LFB47:
 168:mcu-bsp/lib/src/viccom_stm32l0xx.c **** 
 169:mcu-bsp/lib/src/viccom_stm32l0xx.c **** bool VICCOM_dataAvailable(viccom_t* state) {
 881              		.loc 1 169 44 is_stmt 1 view -0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              		@ link register save eliminated.
 170:mcu-bsp/lib/src/viccom_stm32l0xx.c ****     return state->dataAvailable;
 886              		.loc 1 170 5 view .LVU266
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 52


 887              		.loc 1 170 17 is_stmt 0 view .LVU267
 888 0000 007C     		ldrb	r0, [r0, #16]
 889              	.LVL38:
 171:mcu-bsp/lib/src/viccom_stm32l0xx.c **** }...
 890              		.loc 1 171 1 view .LVU268
 891              		@ sp needed
 892 0002 7047     		bx	lr
 893              		.cfi_endproc
 894              	.LFE47:
 896              		.global	transmitData
 897              		.section	.bss.transmitData,"aw",%nobits
 898              		.align	2
 899              		.set	.LANCHOR0,. + 0
 902              	transmitData:
 903 0000 00000000 		.space	20
 903      00000000 
 903      00000000 
 903      00000000 
 903      00000000 
 904              		.text
 905              	.Letext0:
 906              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10-2020-q4-m
 907              		.file 5 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10-2020-q4-m
 908              		.file 6 "mcu-bsp/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 909              		.file 7 "mcu-bsp/lib/src/../inc/viccom.h"
ARM GAS  C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s 			page 53


DEFINED SYMBOLS
                            *ABS*:00000000 viccom_stm32l0xx.c
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:16     .text.VICCOM_stm_init:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:24     .text.VICCOM_stm_init:00000000 VICCOM_stm_init
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:50     .text.VICCOM_pdmaHandler:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:57     .text.VICCOM_pdmaHandler:00000000 VICCOM_pdmaHandler
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:272    .text.VICCOM_pdmaHandler:00000098 $d
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:281    .text.VICCOM_uartHandler:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:288    .text.VICCOM_uartHandler:00000000 VICCOM_uartHandler
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:520    .text.VICCOM_uartHandler:000000bc $d
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:530    .text.VICCOM_send:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:537    .text.VICCOM_send:00000000 VICCOM_send
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:825    .text.VICCOM_send:000000dc $d
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:836    .text.VICCOM_getBuffer:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:843    .text.VICCOM_getBuffer:00000000 VICCOM_getBuffer
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:871    .text.VICCOM_dataAvailable:00000000 $t
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:878    .text.VICCOM_dataAvailable:00000000 VICCOM_dataAvailable
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:902    .bss.transmitData:00000000 transmitData
C:\Users\vic_user\AppData\Local\Temp\cchWdY2m.s:898    .bss.transmitData:00000000 $d

NO UNDEFINED SYMBOLS
